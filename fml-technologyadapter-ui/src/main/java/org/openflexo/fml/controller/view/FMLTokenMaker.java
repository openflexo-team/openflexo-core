/* The following code was generated by JFlex 1.4.1 on 22/05/2023 14:53 */

/*
 * Generated on 5/22/23, 2:53 PM
 */
package org.openflexo.fml.controller.view;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class FMLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\40\1\15"+
    "\1\17\1\1\1\44\1\42\1\7\2\41\1\22\1\43\1\36\1\26"+
    "\1\24\1\21\1\4\3\6\4\6\2\3\1\50\1\36\1\71\1\70"+
    "\1\72\1\40\1\37\1\62\2\5\1\63\2\5\2\1\1\66\10\1"+
    "\1\65\2\1\1\64\1\67\4\1\1\41\1\11\1\41\1\73\1\2"+
    "\1\0\1\32\1\14\1\52\1\55\1\25\1\31\1\53\1\45\1\47"+
    "\2\1\1\33\1\56\1\13\1\54\1\46\1\61\1\30\1\34\1\27"+
    "\1\12\1\57\1\51\1\23\1\60\1\1\1\35\1\74\1\35\1\40"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\3\1\1\4\1\5\2\6"+
    "\2\1\1\6\6\1\1\7\1\1\3\6\11\1\3\6"+
    "\1\10\1\11\4\10\1\12\5\10\1\13\3\10\1\0"+
    "\1\14\1\0\2\14\7\1\2\4\1\15\1\16\1\17"+
    "\1\20\16\1\1\21\5\1\4\0\2\1\2\21\14\1"+
    "\1\22\4\0\1\23\11\0\1\20\1\0\1\24\1\1"+
    "\1\25\4\1\1\4\1\26\1\4\1\27\20\1\4\0"+
    "\3\1\1\30\15\1\15\0\4\1\1\4\1\1\1\31"+
    "\10\1\2\0\1\30\1\0\14\1\2\0\1\32\2\0"+
    "\1\33\2\0\1\34\1\0\3\1\1\4\5\1\3\0"+
    "\11\1\7\0\2\1\1\4\3\1\3\0\7\1\1\35"+
    "\2\0\2\1\1\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\364\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\364\0\u05b8\0\364\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\364\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\364\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\364\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0393\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\364\0\364\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u0131"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\364\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\364\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u0d1b\0\u1cd5\0\u0131"+
    "\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\364\0\u1e43\0\364"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u0131"+
    "\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u0131\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\364\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c"+
    "\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\u3879\0\u3190\0\u38b6\0\u3247\0\u38f3\0\u32fe\0\u3930\0\u396d"+
    "\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55"+
    "\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\364"+
    "\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3eab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\5\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\2\5\1\16\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\32"+
    "\1\35\1\36\1\20\1\6\1\37\1\40\1\34\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\10\6\1\20"+
    "\1\50\1\51\1\34\1\52\10\53\1\54\11\53\1\55"+
    "\6\53\1\56\13\53\1\57\3\53\1\60\33\53\1\61"+
    "\11\53\1\62\6\53\1\63\13\53\1\64\3\53\1\65"+
    "\23\53\10\66\1\67\20\66\1\70\13\66\1\71\3\66"+
    "\1\72\23\66\76\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\17\6\5\0\3\74\2\7\1\74\1\7\2\0\4\74"+
    "\2\0\1\74\3\0\1\74\1\75\1\76\1\0\6\74"+
    "\2\0\1\74\5\0\3\74\1\0\17\74\5\0\3\74"+
    "\2\7\1\74\1\7\2\0\4\74\2\0\1\74\3\0"+
    "\1\77\1\75\1\76\1\0\6\74\2\0\1\74\5\0"+
    "\3\74\1\0\17\74\6\0\6\6\2\0\1\73\1\6"+
    "\1\100\1\6\6\0\1\6\1\0\1\6\1\0\5\6"+
    "\1\101\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\102\1\0\3\6"+
    "\1\103\2\6\10\0\3\6\1\0\3\6\1\104\13\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\105\1\0\6\6\10\0\3\6\1\0\3\6\1\106"+
    "\13\6\5\0\10\15\1\107\1\110\3\15\1\111\57\15"+
    "\20\0\1\16\75\0\1\112\1\113\45\0\1\34\74\0"+
    "\1\34\7\0\2\114\1\0\1\114\67\0\6\6\2\0"+
    "\1\73\1\6\1\115\1\6\6\0\1\116\1\0\1\6"+
    "\1\0\4\6\1\117\1\6\10\0\3\6\1\0\6\6"+
    "\1\120\10\6\33\0\1\34\41\0\1\34\5\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\121\4\6\10\0\1\122\2\6\1\0\7\6"+
    "\1\123\7\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\124\1\0\6\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\125\1\6\1\126\1\127"+
    "\1\6\10\0\2\6\1\130\1\0\3\6\1\131\13\6"+
    "\6\0\6\6\2\0\1\73\2\6\1\132\6\0\1\6"+
    "\1\0\1\6\1\0\5\6\1\133\10\0\3\6\1\0"+
    "\1\6\1\134\15\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\2\6"+
    "\1\135\1\0\3\6\1\136\13\6\6\0\6\6\2\0"+
    "\1\73\1\137\2\6\6\0\1\6\1\0\1\140\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\67\0\1\141\1\142"+
    "\1\143\2\0\1\144\47\0\1\34\75\0\1\34\24\0"+
    "\1\34\5\0\6\6\2\0\1\73\1\145\2\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\146\4\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\1\6"+
    "\1\147\1\6\6\0\1\6\1\0\1\6\1\0\2\6"+
    "\1\150\3\6\10\0\3\6\1\0\5\6\1\151\11\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\1\152\1\6\1\153\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\154\4\6\10\0\3\6"+
    "\1\0\3\6\1\155\13\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\156\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\1\6"+
    "\1\157\1\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\160\1\0\6\6\10\0"+
    "\3\6\1\0\3\6\1\150\13\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\3\6"+
    "\1\161\2\6\10\0\3\6\1\0\3\6\1\162\13\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\163\2\6\10\0\3\6\1\0"+
    "\3\6\1\164\13\6\76\0\1\20\75\0\1\20\76\0"+
    "\1\34\10\53\1\0\11\53\1\0\6\53\1\0\13\53"+
    "\1\0\3\53\1\0\23\53\21\0\1\165\102\0\1\166"+
    "\17\0\1\167\54\0\1\170\116\0\1\171\44\0\1\172"+
    "\102\0\1\173\17\0\1\174\54\0\1\175\116\0\1\176"+
    "\23\0\10\66\1\0\20\66\1\0\13\66\1\0\3\66"+
    "\1\0\23\66\27\0\1\177\17\0\1\200\54\0\1\201"+
    "\116\0\1\202\35\0\1\203\62\0\7\74\2\0\4\74"+
    "\2\0\1\74\3\0\1\74\1\0\1\74\1\0\6\74"+
    "\2\0\1\74\5\0\3\74\1\0\17\74\5\0\3\74"+
    "\2\204\1\74\1\204\2\0\4\74\2\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\205\6\74\2\0\1\74\3\0"+
    "\1\205\1\0\3\74\1\0\17\74\5\0\3\74\4\206"+
    "\2\0\3\74\1\206\2\0\1\74\3\0\1\74\1\0"+
    "\1\206\1\0\2\74\2\206\2\74\2\0\1\74\5\0"+
    "\3\74\1\0\1\74\1\206\2\74\1\206\4\74\2\206"+
    "\4\74\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\2\6\1\207\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\150\1\0\6\6\10\0\3\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\3\6\1\0\1\210\16\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\3\6\1\0\5\6\1\211"+
    "\11\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\212\5\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\2\6"+
    "\1\213\14\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\3\6\1\214\13\6\5\0\11\107\1\215\3\107\1\216"+
    "\63\107\1\15\1\107\2\15\1\0\1\15\1\217\3\15"+
    "\11\107\3\15\43\107\22\0\1\220\52\0\3\74\2\114"+
    "\1\74\1\114\2\0\4\74\2\0\1\74\3\0\1\74"+
    "\1\0\1\76\1\0\6\74\2\0\1\74\5\0\3\74"+
    "\1\0\17\74\6\0\6\6\2\0\1\73\1\221\2\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\4\6\1\150\12\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\1\222\5\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\5\6\1\101"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\223\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\1\224"+
    "\2\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\225\1\0\6\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\1\6\1\226"+
    "\1\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\227\5\6\10\0"+
    "\3\6\1\0\10\6\1\230\6\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\3\6\1\221\13\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\231\1\6\10\0\3\6\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\3\6\1\232\13\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\101\4\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\150\4\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\233\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\234\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\235\5\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\236\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\2\6\1\150\14\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\1\6"+
    "\1\237\1\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\1\150\3\6"+
    "\1\240\1\6\10\0\3\6\1\0\17\6\17\0\1\241"+
    "\107\0\1\242\134\0\1\243\34\0\1\244\50\0\6\6"+
    "\2\0\1\73\2\6\1\245\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\2\6\1\246\1\0\3\6\1\247\13\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\250\4\6\1\251\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\1\6\1\252\1\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\130\1\0\6\6\10\0\2\6\1\253"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\254\5\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\255\1\0\6\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\1\6\1\256\1\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\150\5\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\257\3\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\2\6\1\260\1\6"+
    "\1\261\1\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\262\5\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\4\6\1\263\12\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\264\1\6\10\0\3\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\2\6\1\265\1\0\17\6"+
    "\53\0\1\266\61\0\1\267\70\0\1\270\116\0\1\271"+
    "\71\0\1\272\61\0\1\273\70\0\1\274\116\0\1\275"+
    "\71\0\1\276\61\0\1\277\70\0\1\300\116\0\1\301"+
    "\26\0\4\302\5\0\1\302\10\0\1\302\3\0\2\302"+
    "\17\0\1\302\2\0\1\302\4\0\2\302\11\0\3\74"+
    "\2\204\1\74\1\204\2\0\4\74\2\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\0\6\74\2\0\1\74\5\0"+
    "\3\74\1\0\17\74\10\0\2\204\1\0\1\204\67\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\10\6\1\303\6\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\304\1\0\6\6\10\0\3\6\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\2\6\1\305\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\2\6\1\225\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\306\1\6\10\0\3\6\1\0\17\6"+
    "\5\0\10\107\1\0\67\107\4\307\2\107\1\215\2\107"+
    "\1\307\1\216\7\107\1\307\3\107\2\307\17\107\1\307"+
    "\2\107\1\307\4\107\2\307\11\107\1\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\5\6\1\150\11\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\310\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\1\6\1\156\1\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\311\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\1\6\1\150\1\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\312\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\1\313\2\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\1\314\2\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\5\6"+
    "\1\224\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\3\6"+
    "\1\315\2\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\316\5\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\317\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\2\6\1\320\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\1\122"+
    "\5\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\131\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\321\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\34\0\1\322\101\0\1\323\126\0"+
    "\1\324\36\0\1\325\45\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\4\6\1\326\1\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\6\6\1\327\10\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\1\330"+
    "\5\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\1\331"+
    "\5\6\10\0\2\6\1\332\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\3\6\1\317\13\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\101\1\6\10\0\3\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\1\150\2\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\333\2\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\1\6"+
    "\1\334\15\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\335\2\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\3\6\1\336\2\6"+
    "\10\0\2\6\1\337\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\333\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\1\6\1\254\15\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\340\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\1\341\2\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\4\6\1\250\12\6\55\0\1\342\51\0"+
    "\1\266\115\0\1\343\52\0\1\344\120\0\1\345\51\0"+
    "\1\272\115\0\1\346\52\0\1\347\120\0\1\350\51\0"+
    "\1\276\115\0\1\351\52\0\1\352\53\0\4\353\5\0"+
    "\1\353\10\0\1\353\3\0\2\353\17\0\1\353\2\0"+
    "\1\353\4\0\2\353\12\0\6\6\2\0\1\73\1\101"+
    "\2\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\5\6\1\354\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\2\6\1\355\3\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\356\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\5\0\3\107\4\357\2\107\1\215"+
    "\2\107\1\357\1\216\7\107\1\357\3\107\2\357\17\107"+
    "\1\357\2\107\1\357\4\107\2\357\11\107\1\0\6\6"+
    "\2\0\1\73\1\6\1\360\1\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\3\6\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\4\6\1\361\12\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\225\4\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\2\6\1\362\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\250\5\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\363\4\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\156\4\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\3\6\1\364\13\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\1\6\1\156\15\6\52\0\1\365\101\0"+
    "\1\366\56\0\1\367\41\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\2\6"+
    "\1\370\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\3\6\1\371\2\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\372\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\3\6\1\373\2\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\4\6\1\101\12\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\1\374"+
    "\5\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\375\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\2\6\1\376\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\1\377\2\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\1\6\1\101\1\6\6\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\150\1\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\u0100\1\0"+
    "\6\6\10\0\3\6\1\0\17\6\26\0\1\u0101\107\0"+
    "\1\266\13\0\1\342\25\0\1\344\1\u0102\4\344\1\u0102"+
    "\2\0\3\344\2\0\1\u0102\1\0\1\344\1\u0102\1\344"+
    "\1\u0102\1\344\1\u0102\6\344\1\0\7\u0102\3\344\1\u0102"+
    "\17\344\1\u0102\25\0\1\u0103\107\0\1\272\13\0\1\345"+
    "\25\0\1\347\1\u0104\4\347\1\u0104\2\0\3\347\2\0"+
    "\1\u0104\1\0\1\347\1\u0104\1\347\1\u0104\1\347\1\u0104"+
    "\6\347\1\0\7\u0104\3\347\1\u0104\17\347\1\u0104\25\0"+
    "\1\u0105\107\0\1\276\13\0\1\350\25\0\1\352\1\u0106"+
    "\4\352\1\u0106\2\0\3\352\2\0\1\u0106\1\0\1\352"+
    "\1\u0106\1\352\1\u0106\1\352\1\u0106\6\352\1\0\7\u0106"+
    "\3\352\1\u0106\17\352\1\u0106\7\0\4\u0107\5\0\1\u0107"+
    "\10\0\1\u0107\3\0\2\u0107\17\0\1\u0107\2\0\1\u0107"+
    "\4\0\2\u0107\12\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\1\6\1\u0108"+
    "\1\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\7\6\1\150\7\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\3\6\1\u0109"+
    "\2\6\10\0\3\6\1\0\17\6\5\0\3\107\4\u010a"+
    "\2\107\1\215\2\107\1\u010a\1\216\7\107\1\u010a\3\107"+
    "\2\u010a\17\107\1\u010a\2\107\1\u010a\4\107\2\u010a\11\107"+
    "\1\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\3\6\1\0\4\6\1\u0100"+
    "\12\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\u010b\1\0\6\6\10\0\3\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\u010c\4\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\3\6\1\321\2\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\1\6\1\u010d"+
    "\1\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\61\0\1\u010e\50\0\1\u010f\113\0"+
    "\1\u0110\26\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\1\6"+
    "\1\210\15\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\u0111\5\6\10\0\3\6"+
    "\1\0\17\6\6\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\1\6\1\u0112\15\6\6\0\6\6\2\0\1\73\1\6"+
    "\1\u0113\1\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\u010d\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\1\6"+
    "\1\156\1\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\4\6\1\u0114"+
    "\1\6\10\0\3\6\1\0\17\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\u0115\1\6\10\0\3\6\1\0\17\6\6\0\6\6"+
    "\2\0\1\73\3\6\6\0\1\6\1\0\1\6\1\0"+
    "\5\6\1\150\10\0\3\6\1\0\17\6\26\0\1\344"+
    "\74\0\1\347\74\0\1\352\56\0\4\6\5\0\1\6"+
    "\10\0\1\6\3\0\2\6\17\0\1\6\2\0\1\6"+
    "\4\0\2\6\12\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\u0116\2\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\1\6"+
    "\1\250\1\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\5\0\3\107\4\15\2\107"+
    "\1\215\2\107\1\15\1\216\7\107\1\15\3\107\2\15"+
    "\17\107\1\15\2\107\1\15\4\107\2\15\11\107\1\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\150\3\6\10\0\3\6\1\0\17\6"+
    "\6\0\6\6\2\0\1\73\3\6\6\0\1\6\1\0"+
    "\1\u0117\1\0\6\6\10\0\3\6\1\0\17\6\6\0"+
    "\6\6\2\0\1\73\3\6\6\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\u0118\17\6\35\0\1\324"+
    "\113\0\1\u0119\101\0\1\u011a\21\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\210\1\0\6\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\u011b\5\6\10\0"+
    "\3\6\1\0\17\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\1\6\1\u011c\15\6\6\0\6\6\2\0\1\73"+
    "\1\130\2\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\1\210\5\6"+
    "\10\0\3\6\1\0\17\6\6\0\6\6\2\0\1\73"+
    "\3\6\6\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\1\6\1\101\15\6\6\0\6\6\2\0"+
    "\1\73\3\6\6\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\4\6\1\150\12\6\53\0\1\u011d"+
    "\41\0\1\324\62\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\u011e\1\0\6\6\10\0\3\6\1\0"+
    "\17\6\6\0\6\6\2\0\1\73\3\6\6\0\1\6"+
    "\1\0\1\u011f\1\0\6\6\10\0\3\6\1\0\17\6"+
    "\34\0\1\367\46\0\6\6\2\0\1\73\3\6\6\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\4\6\1\210\12\6\6\0\6\6\2\0\1\73\3\6"+
    "\6\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\3\6\1\u010b\13\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\20\1\1\11\1\1\1\11"+
    "\17\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\1\1\1\0\13\1\2\11\26\1\4\0\20\1\1\11"+
    "\4\0\1\11\11\0\1\1\1\0\10\1\1\11\1\1"+
    "\1\11\20\1\4\0\21\1\15\0\17\1\2\0\1\11"+
    "\1\0\14\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\11\1\3\0\11\1\7\0\6\1\3\0\7\1"+
    "\1\11\2\0\2\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FMLTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 30: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 32: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 33: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 34: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 35: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 36: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 37: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 38: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 39: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 40: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 41: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 42: break;
        case 29: 
          { addToken(Token.FUNCTION);
          }
        case 43: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 44: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 45: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 46: break;
        case 25: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 47: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 48: break;
        case 23: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 49: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 50: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 51: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 52: break;
        case 21: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 53: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 8: 
          { 
          }
        case 57: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 288: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 289: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 290: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 291: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
