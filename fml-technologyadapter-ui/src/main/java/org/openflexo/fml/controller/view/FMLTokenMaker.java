/* The following code was generated by JFlex 1.4.1 on 06/05/20 15:32 */

/*
 * Generated on 5/6/20 3:32 PM
 */
package org.openflexo.fml.controller.view;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class FMLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\32\1\15"+
    "\1\17\1\1\1\36\1\34\1\7\2\33\1\22\1\35\1\30\1\26"+
    "\1\24\1\21\1\4\3\6\4\6\2\3\1\46\1\30\1\70\1\67"+
    "\1\71\1\32\1\31\1\61\2\5\1\62\2\5\2\1\1\65\10\1"+
    "\1\64\2\1\1\63\1\66\4\1\1\33\1\11\1\33\1\72\1\2"+
    "\1\0\1\50\1\14\1\52\1\55\1\25\1\43\1\53\1\37\1\44"+
    "\2\1\1\45\1\56\1\13\1\54\1\41\1\60\1\51\1\42\1\40"+
    "\1\12\1\57\1\47\1\23\2\1\1\27\1\73\1\27\1\32\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\3\1\1\4\1\5\2\6"+
    "\2\1\1\6\1\7\1\1\3\6\16\1\3\6\1\10"+
    "\1\11\4\10\1\12\5\10\1\13\3\10\1\0\1\14"+
    "\1\0\2\14\6\1\2\4\1\15\1\16\1\17\1\20"+
    "\3\1\4\0\10\1\2\21\20\1\1\22\4\0\1\23"+
    "\11\0\1\20\1\0\1\24\1\1\1\25\3\1\1\4"+
    "\1\26\1\4\1\27\1\1\4\0\10\1\1\30\23\1"+
    "\15\0\3\1\1\4\1\1\2\0\1\30\1\0\22\1"+
    "\2\0\1\31\2\0\1\32\2\0\1\33\1\0\2\1"+
    "\1\4\1\1\3\0\14\1\7\0\2\1\1\4\3\0"+
    "\7\1\2\0\2\1\1\34\1\0\3\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\360\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\360\0\u0438\0\360\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\360\0\u0924\0\u0960\0\u099c\0\u09d8\0\360"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\360\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0384\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\360\0\360"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u012c\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\360\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\360\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u0ca8\0\u1a40\0\u012c\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\360\0\u1b6c\0\360\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u012c\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\360\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c"+
    "\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u2cc4\0\u3354\0\u2d78"+
    "\0\u3390\0\u2e2c\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8"+
    "\0\u3714\0\u3750\0\u378c\0\u37c8\0\360\0\u3804\0\u3840\0\u387c"+
    "\0\u38b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\5\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\2\5\1\16\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\1\24\1\5\1\25"+
    "\1\26\1\24\1\27\1\30\1\20\1\6\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\26\1\37\1\40\1\41"+
    "\1\42\1\43\1\6\1\44\1\45\1\46\7\6\1\20"+
    "\1\47\1\50\1\26\1\51\10\52\1\53\11\52\1\54"+
    "\14\52\1\55\3\52\1\56\3\52\1\57\34\52\1\60"+
    "\11\52\1\61\14\52\1\62\3\52\1\63\3\52\1\64"+
    "\24\52\10\65\1\66\26\65\1\67\3\65\1\70\3\65"+
    "\1\71\24\65\75\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\20\6\5\0"+
    "\3\73\2\7\1\73\1\7\2\0\4\73\2\0\1\73"+
    "\3\0\1\73\1\74\1\75\3\0\1\73\5\0\7\73"+
    "\1\0\20\73\5\0\3\73\2\7\1\73\1\7\2\0"+
    "\4\73\2\0\1\73\3\0\1\76\1\74\1\75\3\0"+
    "\1\73\5\0\7\73\1\0\20\73\6\0\6\6\2\0"+
    "\1\72\1\6\1\77\1\6\6\0\1\6\1\0\1\6"+
    "\11\0\3\6\1\100\3\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\101\11\0"+
    "\7\6\1\0\1\6\1\102\16\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\103\11\0\7\6"+
    "\1\0\5\6\1\104\12\6\5\0\10\15\1\105\1\106"+
    "\3\15\1\107\56\15\20\0\1\16\74\0\1\110\1\111"+
    "\44\0\1\26\73\0\1\26\7\0\2\112\1\0\1\112"+
    "\66\0\6\6\2\0\1\72\1\6\1\113\1\6\6\0"+
    "\1\114\1\0\1\6\11\0\6\6\1\115\1\0\20\6"+
    "\33\0\1\26\40\0\1\26\65\0\1\116\1\117\1\120"+
    "\2\0\1\121\41\0\1\26\74\0\1\26\31\0\1\26"+
    "\5\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\1\122\6\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\1\123\2\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\2\6\1\124\15\6\6\0\6\6"+
    "\2\0\1\72\1\125\2\6\6\0\1\6\1\0\1\126"+
    "\11\0\7\6\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\6\6\1\127"+
    "\1\0\2\6\1\130\2\6\1\131\12\6\6\0\6\6"+
    "\2\0\1\72\1\6\1\132\1\6\6\0\1\6\1\0"+
    "\1\6\11\0\4\6\1\133\2\6\1\0\7\6\1\134"+
    "\10\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\5\6\1\135\1\6\1\0\5\6"+
    "\1\136\12\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\1\137\4\6\1\140\1\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\2\6\1\141"+
    "\6\0\1\6\1\0\1\6\11\0\3\6\1\133\3\6"+
    "\1\0\3\6\1\142\14\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\143\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\2\6\1\144\2\6"+
    "\1\145\12\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\146\11\0\7\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\147"+
    "\11\0\7\6\1\0\5\6\1\133\12\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\150\3\6\1\151\12\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\152\3\6\1\153\12\6"+
    "\75\0\1\20\74\0\1\20\75\0\1\26\10\52\1\0"+
    "\11\52\1\0\14\52\1\0\3\52\1\0\3\52\1\0"+
    "\24\52\21\0\1\154\112\0\1\155\73\0\1\156\3\0"+
    "\1\157\76\0\1\160\45\0\1\161\112\0\1\162\73\0"+
    "\1\163\3\0\1\164\76\0\1\165\24\0\10\65\1\0"+
    "\26\65\1\0\3\65\1\0\3\65\1\0\24\65\40\0"+
    "\1\166\73\0\1\167\3\0\1\170\76\0\1\171\36\0"+
    "\1\172\61\0\7\73\2\0\4\73\2\0\1\73\3\0"+
    "\1\73\1\0\1\73\3\0\1\73\5\0\7\73\1\0"+
    "\20\73\5\0\3\73\2\173\1\73\1\173\2\0\4\73"+
    "\2\0\1\73\3\0\1\73\1\0\1\73\1\174\2\0"+
    "\1\73\3\0\1\174\1\0\7\73\1\0\20\73\5\0"+
    "\3\73\4\175\2\0\3\73\1\175\2\0\1\73\3\0"+
    "\1\73\1\0\1\175\3\0\1\73\5\0\4\73\1\175"+
    "\2\73\1\0\1\73\1\175\1\73\1\175\2\73\1\175"+
    "\3\73\2\175\4\73\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\5\6\1\176\1\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\133\11\0\7\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\1\177\17\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\7\6"+
    "\1\0\7\6\1\200\10\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\4\6\1\201\13\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\5\6"+
    "\1\202\12\6\5\0\11\105\1\203\3\105\1\204\62\105"+
    "\1\15\1\105\2\15\1\0\1\15\1\205\3\15\22\105"+
    "\1\15\2\105\1\15\5\105\1\15\22\105\22\0\1\206"+
    "\51\0\3\73\2\112\1\73\1\112\2\0\4\73\2\0"+
    "\1\73\3\0\1\73\1\0\1\75\3\0\1\73\5\0"+
    "\7\73\1\0\20\73\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\6\6"+
    "\1\133\11\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\1\6\1\207\5\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\3\6\1\100\3\6\1\0\20\6"+
    "\17\0\1\210\106\0\1\211\132\0\1\212\34\0\1\213"+
    "\47\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\214\11\0\7\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\2\6\1\215\6\0\1\6\1\0\1\6\11\0"+
    "\7\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\5\6\1\216\1\6"+
    "\1\0\5\6\1\217\12\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\2\6\1\220"+
    "\4\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\1\6\1\133\4\6"+
    "\1\221\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\5\6"+
    "\1\222\12\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\5\6\1\223"+
    "\12\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\2\6\1\133\15\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\1\6\1\224\1\6\1\225\3\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\2\6\1\226\4\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\3\6\1\227\3\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\4\6\1\133\13\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\230\11\0"+
    "\5\6\1\231\1\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\1\6"+
    "\1\232\5\6\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\3\6\1\233"+
    "\3\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\1\6\1\234\5\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\1\6\1\235\5\6\1\0"+
    "\3\6\1\236\5\6\1\237\6\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\240\11\0\7\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\1\6\1\241"+
    "\1\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\1\6\1\133\5\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\4\6\1\242\1\6\1\243\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\1\6\1\244\5\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\6\6\1\245\11\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\6\6\1\246\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\5\6\1\247"+
    "\1\6\1\0\20\6\45\0\1\250\74\0\1\251\77\0"+
    "\1\252\75\0\1\253\64\0\1\254\74\0\1\255\77\0"+
    "\1\256\75\0\1\257\64\0\1\260\74\0\1\261\77\0"+
    "\1\262\75\0\1\263\27\0\4\264\5\0\1\264\10\0"+
    "\1\264\15\0\1\264\4\0\1\264\1\0\1\264\2\0"+
    "\1\264\3\0\2\264\11\0\3\73\2\173\1\73\1\173"+
    "\2\0\4\73\2\0\1\73\3\0\1\73\1\0\1\73"+
    "\3\0\1\73\5\0\7\73\1\0\20\73\10\0\2\173"+
    "\1\0\1\173\66\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\11\6\1\265"+
    "\6\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\266\11\0\7\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\5\6\1\214\1\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\6\6"+
    "\1\267\1\0\20\6\5\0\10\105\1\0\66\105\4\270"+
    "\2\105\1\203\2\105\1\270\1\204\7\105\1\270\15\105"+
    "\1\270\4\105\1\270\1\105\1\270\2\105\1\270\3\105"+
    "\2\270\11\105\1\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\271\11\0\7\6\1\0\20\6\45\0"+
    "\1\272\75\0\1\273\116\0\1\274\57\0\1\275\23\0"+
    "\6\6\2\0\1\72\1\6\1\133\1\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\6\6\1\276\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\10\6\1\277\7\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\1\6\1\300\5\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\131\11\0\7\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\301"+
    "\11\0\7\6\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\302\16\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\7\6"+
    "\1\133\10\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\1\6\1\303\5\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\5\6\1\304\12\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\1\6\1\122\5\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\2\6\1\100\15\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\6\6\1\100\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\1\133\6\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\1\6\1\305\5\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\5\6\1\306\1\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\1\307\2\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\310\11\0"+
    "\7\6\1\0\20\6\6\0\6\6\2\0\1\72\1\311"+
    "\2\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\1\6\1\312\16\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\3\6\1\313\14\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\5\6\1\314\1\6\1\0\1\6\1\315\16\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\312\11\0\7\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\7\6"+
    "\1\0\3\6\1\232\14\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\316\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\1\317\2\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\6\6\1\224\11\6\46\0\1\320"+
    "\100\0\1\321\52\0\1\251\72\0\1\322\110\0\1\323"+
    "\100\0\1\324\52\0\1\255\72\0\1\325\110\0\1\326"+
    "\100\0\1\327\52\0\1\261\72\0\1\330\52\0\4\331"+
    "\5\0\1\331\10\0\1\331\15\0\1\331\4\0\1\331"+
    "\1\0\1\331\2\0\1\331\3\0\2\331\12\0\6\6"+
    "\2\0\1\72\1\100\2\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\3\6\1\332"+
    "\3\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\333\11\0\7\6\1\0\20\6"+
    "\5\0\3\105\4\334\2\105\1\203\2\105\1\334\1\204"+
    "\7\105\1\334\15\105\1\334\4\105\1\334\1\105\1\334"+
    "\2\105\1\334\3\105\2\334\11\105\1\0\6\6\2\0"+
    "\1\72\1\6\1\335\1\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\20\6\44\0\1\336\106\0\1\337"+
    "\63\0\1\340\32\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\5\6\1\341\1\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\1\6\1\342\16\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\343\11\0\7\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\7\6"+
    "\1\0\3\6\1\146\14\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\1\6\1\224"+
    "\5\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\344\16\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\2\6\1\146"+
    "\15\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\2\6\1\345\15\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\5\6\1\346\12\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\2\6\1\214\15\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\5\6\1\347\1\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\5\6"+
    "\1\350\1\6\1\0\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\1\6\1\351"+
    "\5\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\352\11\0\7\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\1\6\1\100\1\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\20\6\6\0"+
    "\6\6\2\0\1\72\1\353\2\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\20\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\6\6"+
    "\1\133\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\354\11\0\7\6\1\0\20\6"+
    "\47\0\1\251\3\0\1\321\46\0\1\355\53\0\1\322"+
    "\1\356\4\322\1\356\2\0\3\322\2\0\1\356\1\0"+
    "\1\322\1\356\1\322\1\356\1\322\1\356\1\0\7\356"+
    "\7\322\1\356\20\322\1\356\46\0\1\255\3\0\1\324"+
    "\46\0\1\357\53\0\1\325\1\360\4\325\1\360\2\0"+
    "\3\325\2\0\1\360\1\0\1\325\1\360\1\325\1\360"+
    "\1\325\1\360\1\0\7\360\7\325\1\360\20\325\1\360"+
    "\46\0\1\261\3\0\1\327\46\0\1\361\53\0\1\330"+
    "\1\362\4\330\1\362\2\0\3\330\2\0\1\362\1\0"+
    "\1\330\1\362\1\330\1\362\1\330\1\362\1\0\7\362"+
    "\7\330\1\362\20\330\1\362\7\0\4\363\5\0\1\363"+
    "\10\0\1\363\15\0\1\363\4\0\1\363\1\0\1\363"+
    "\2\0\1\363\3\0\2\363\12\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\2\6\1\364"+
    "\4\6\1\0\20\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\365\16\6\5\0\3\105\4\366\2\105\1\203\2\105"+
    "\1\366\1\204\7\105\1\366\15\105\1\366\4\105\1\366"+
    "\1\105\1\366\2\105\1\366\3\105\2\366\11\105\1\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\6\6\1\354\11\6\61\0\1\367"+
    "\70\0\1\370\66\0\1\371\30\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\3\6\1\177\14\6\6\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\1\6\1\372\5\6"+
    "\1\0\20\6\6\0\6\6\2\0\1\72\3\6\6\0"+
    "\1\6\1\0\1\6\11\0\7\6\1\0\3\6\1\373"+
    "\14\6\6\0\6\6\2\0\1\72\1\6\1\374\1\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\301\16\6\6\0"+
    "\6\6\2\0\1\72\1\6\1\375\1\6\6\0\1\6"+
    "\1\0\1\6\11\0\7\6\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\7\6\1\0\10\6\1\100\7\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\7\6"+
    "\1\0\2\6\1\376\15\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\375\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\2\6\1\146\4\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\6\6\1\377\1\0\20\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\3\6\1\133\3\6\1\0\20\6\26\0\1\322\73\0"+
    "\1\325\73\0\1\330\55\0\4\6\5\0\1\6\10\0"+
    "\1\6\15\0\1\6\4\0\1\6\1\0\1\6\2\0"+
    "\1\6\3\0\2\6\12\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\u0100\16\6\6\0\6\6\2\0\1\72\1\6\1\224"+
    "\1\6\6\0\1\6\1\0\1\6\11\0\7\6\1\0"+
    "\20\6\5\0\3\105\4\15\2\105\1\203\2\105\1\15"+
    "\1\204\7\105\1\15\15\105\1\15\4\105\1\15\1\105"+
    "\1\15\2\105\1\15\3\105\2\15\11\105\51\0\1\274"+
    "\66\0\1\u0101\103\0\1\u0102\20\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\177\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\1\6\1\u0103\5\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\3\6\1\u0104\14\6\6\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\u0105\20\6\6\0\6\6\2\0\1\72"+
    "\3\6\6\0\1\6\1\0\1\113\11\0\7\6\1\0"+
    "\20\6\6\0\6\6\2\0\1\72\3\6\6\0\1\6"+
    "\1\0\1\6\11\0\1\6\1\177\5\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\6\11\0\7\6\1\0\3\6\1\100\14\6\46\0"+
    "\1\u0106\45\0\1\274\61\0\6\6\2\0\1\72\3\6"+
    "\6\0\1\6\1\0\1\u0107\11\0\7\6\1\0\20\6"+
    "\6\0\6\6\2\0\1\72\3\6\6\0\1\6\1\0"+
    "\1\u0108\11\0\7\6\1\0\20\6\45\0\1\340\34\0"+
    "\6\6\2\0\1\72\3\6\6\0\1\6\1\0\1\6"+
    "\11\0\7\6\1\0\6\6\1\177\11\6\6\0\6\6"+
    "\2\0\1\72\3\6\6\0\1\6\1\0\1\6\11\0"+
    "\7\6\1\0\5\6\1\u0109\12\6\6\0\6\6\2\0"+
    "\1\72\3\6\6\0\1\6\1\0\1\6\11\0\4\6"+
    "\1\133\2\6\1\0\20\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\12\1\1\11\1\1\1\11"+
    "\24\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\1\1\1\0\12\1\2\11\5\1\4\0\32\1\1\11"+
    "\4\0\1\11\11\0\1\1\1\0\7\1\1\11\1\1"+
    "\1\11\1\1\4\0\34\1\15\0\5\1\2\0\1\11"+
    "\1\0\22\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\4\1\3\0\14\1\7\0\3\1\3\0\7\1"+
    "\2\0\2\1\1\11\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FMLTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 29: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 30: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 31: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 33: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 34: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 35: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 36: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 37: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 38: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 39: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 40: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 41: break;
        case 28: 
          { addToken(Token.FUNCTION);
          }
        case 42: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 43: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 44: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 45: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 46: break;
        case 23: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 47: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 48: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 49: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 50: break;
        case 21: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 51: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 52: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 53: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 54: break;
        case 8: 
          { 
          }
        case 55: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 266: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 267: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 268: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 269: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
