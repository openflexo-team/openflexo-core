/**
 * Testing concept behaviours
 */

use org.openflexo.foundation.fml.rt.FMLRTModelSlot as FMLRT;

model MyModel {

	/**
	 * Some default behaviours
	 */
	concept ConceptA {

		int i;

		// This is the default constructor for that concept
		// We don't need to supply a name (forbidden if multiple constructors)
		create () {  
			i = 1;
		}

		// This is the default destructor for that concept
		// We don't need to supply a name (forbidden if multiple destructors)
		delete () {
			i = 0;
		}

		// An action (basic behaviour)
		int action1() {
			return 0;
		}

		// Another action
	    void action2() {
			return 0;
		}

		// No return type is required
		action3() {
			return;
		}

		// An action with a visibility modifier
		protected int action4() {
			return 0;
		}

	}

	/**
	 * Multiple constructors and destructors
	 */
	concept ConceptB {

		int i;

		// A first constructor for that concept
		create::constructor1 () {  
			i = 1;
		}

		// Another constructor for that concept
		create::constructor2 () {  
			i = 2;
		}

		// A first destructor for that concept
		delete::delete1 () {
			i = 0;
		}

		// Another destructor for that concept
		delete::delete2 () {
			i = -1;
		}

	}

	/**
	 * An example of event listener
	 */
	/*concept ConceptC {

		listen container.anObject receive(NodeAdded event) {
			
		}
		
		listen container.evaluate_a_function() receive(NodeAdded event) {
			
		}
		
	}*/

	/**
	 * Some technology-specific behaviours
	 */
	/*concept ConceptD {

		// Pointing DropScheme in Diagram technology adapter
		dropNewConcept(String name) with DIAGRAM::DropScheme(target=topLevel) {
		}

		// No need to specify technology adapter model slot, as it is not ambigous
		dropNewConcept(String name) with DropScheme(target=topLevel) {
		}

		// Pointing LinkScheme in Diagram technology adapter
		linkConcepts() with DIAGRAM::LinkScheme(fromTarget=MyConceptGR,toTarget=MyConceptGR) {
		}
		
		// No need to specify technology adapter model slot, as it is not ambigous
		linkConcepts() with LinkScheme(fromTarget=MyConceptGR,toTarget=MyConceptGR) {
		}
		
	}*/


}
