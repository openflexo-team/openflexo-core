use org.openflexo.foundation.fml.rt.FMLTechnologyAdapter as FML;
use org.openflexo.foundation.fml.rt.FMLRTTechnologyAdapter as FML@RT;
use org.openflexo.technologyadapter.gina.GINATechnologyAdapter as GINA;

import java.lang.String;

/**
 * @uri http://formose.lacl.fr/Formose.viewpoint/SysMLKaos-Methodology.fml
 * @version 0.1
 */
public VirtualModel SysMLKaos-Methodology extends Methodology {

	public void action:updateDiagram () {  
		GoalRequirementMapping... matchingSet = (begin match GoalRequirementMapping from this);
		for (requirement : element.requirements) {
			match GoalRequirementMapping 
				from this 
				in matchingSet 
				where (selected.requirement=requirement)
				create:createNewGoal(requirement);
		}
		end match in matchingSet;
	}

	
    @ActionScheme    
    Void updateDiagram() {    
      MatchingSet matchingSet = this.initiateMatching(GoalRequirementMapping);      
      log "On update le diagramme"      
      for (requirement : element.requirements) {      
        FML@RT::MatchFlexoConceptInstance as GoalRequirementMapping match=(requirement=requirement) using GoalRequirementMapping:createNewGoal(requirement)      
      }      
      matchingSet.finalizeMatching()    
    }    
  

}



	
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://formose.lacl.fr/Formose.viewpoint/SysMLKaos-Methodology.fml")
public class SysMLKaos-Methodology extends Methodology  {

  @FMLRTVirtualModelInstanceModelSlot(cardinality=ZeroOne,readOnly=false)  
  public VirtualModelInstanceType<SysMLKaos> sysMLKaos;
  @GetSetProperty(value="diagramElementMappings", access=get)  
  public List<FlexoConceptInstanceType<SysMLKaosElementMapping>> getDiagramElementMappings {  
    return this.SelectFlexoConceptInstance(type=SysMLKaosElementMapping);  
  }

  @CreationScheme  
  SysMLKaos-Methodology:create(String sysMLKaosViewName, FlexoConceptInstanceType<Element> element) {  
    sysMLKaos = SysMLKaos.init("SysMLKaos","SysMLKaos","");    
    declaringElement = parameters.element;    
    log ("Hop on arrive ici avec " + sysMLKaos.toString)    
    log ("Jusqu'ici tout va bien, rootModel=" + sysMLKaos.rootModel)    
    SysMLKaosElementMapping.createNewModel(parameters.element)  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  

  @ActionScheme  
  FlexoConceptInstanceType<SysMLKaosElementMapping> getDiagramElementMapping(FlexoConceptInstanceType<Element> element) {  
    List<FlexoConceptInstanceType<SysMLKaosElementMapping>> list = this.SelectFlexoConceptInstance(type=SysMLKaosElementMapping,where=where=(selected.element = parameters.element));    
    if (list.size > 0) {    
      return list.get(0);    
    }    
    return null;  
  }  

  @ActionScheme  
  FlexoConceptInstanceType<SysMLKaosElementMapping> retrieveDiagramElementMapping(FlexoConceptInstanceType<Element> element) {  
    log ("On cherche le mapping pour " + parameters.element)    
    FlexoConceptInstanceType<SysMLKaosElementMapping> returned = this.getDiagramElementMapping(parameters.element);    
    if (returned = null) {    
      log "On le trouve pas, on le reconstruit"      
      returned = SysMLKaosElementMapping.createNewModel(parameters.element);    
    }    
    return returned;  
  }  


  @FlexoConcept  
  public class SysMLKaosElementMapping {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Element> element;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public VirtualModelInstanceType<GoalModelingDiagram> goalModelingDiagram;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Agent> agent;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<SysMLKaosElementMapping> parentDiagramElementMapping;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public VirtualModelInstanceType<SysMLKaosModel> goalModel;  
  
    @CreationScheme    
    SysMLKaosElementMapping:createNewModel(FlexoConceptInstanceType<Element> anElement) {    
      element = parameters.anElement;      
      goalModel = SysMLKaosModel.init((parameters.anElement.identifier + "-GoalModel"),("GoalModel for " + parameters.anElement.identifier),"",parentDiagramElementMapping);      
      log "On vient de creer un nouveau GoalModellingDiagram"      
      this.updateDiagram()      
      this.firePropertyChange goalModelingDiagram    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @EventListener    
    FlexoConceptInstanceType<GoalRequirementMapping> newGoalCreated() {    
      log ("Received new event " + event)      
      log ("Name equals " + event.goal.name)      
      FlexoConceptInstanceType<Requirement> newRequirement = element.createRequirementNoNotification(event.goal.name,event.goal.description);      
      return GoalRequirementMapping.create(newRequirement,event.goal);    
    }    
  
    @ActionScheme    
    Void refineUsingAgentAllocation() {    
      log "Refining using agent allocation"      
      for (agentGR : goalModelingDiagram.SelectFlexoConceptInstance(type=AgentGR)) {      
        log ("Tiens on s'occupe de l'agent " + agentGR.agent)        
        List<FlexoConceptInstanceType<SysMLKaosElementMapping>> list = container.SelectFlexoConceptInstance(type=SysMLKaosElementMapping,where=where=(selected.agent = agentGR.agent));        
        if (list.size = 0) {        
          this.allocateAgent(agentGR)        
        }      
      }    
    }    
  
    @CreationScheme    
    SysMLKaosElementMapping:createNewDiagramForAgent(FlexoConceptInstanceType<Element> anElement, FlexoConceptInstanceType<Agent> anAgent, FlexoConceptInstanceType<SysMLKaosElementMapping> parentDiagramElementMapping) {    
      element = parameters.anElement;      
      agent = parameters.anAgent;      
      parentDiagramElementMapping = parameters.parentDiagramElementMapping;      
      goalModelingDiagram = GoalModelingDiagram.init((parameters.anElement.identifier + "-GoalModelingDiagram"),);      
      this.firePropertyChange goalModelingDiagram    
    }    
  
    @ActionScheme    
    Void updateDiagram() {    
      MatchingSet matchingSet = this.initiateMatching(GoalRequirementMapping);      
      log "On update le diagramme"      
      for (requirement : element.requirements) {      
        FML@RT::MatchFlexoConceptInstance as GoalRequirementMapping match=(requirement=requirement) using GoalRequirementMapping:createNewGoal(requirement)      
      }      
      matchingSet.finalizeMatching()    
    }    
  
    @EventListener    
    Void newRequirement() {    
      log ("Hop je recois NewRequirement " + event.requirement)      
      log ("container=" + event.requirement.container)      
      if (event.requirement.container = element) {      
        log ("**** Tiens un nouveau requirement " + event.requirement)        
        FlexoConceptInstanceType<GoalRequirementMapping> newGoalRequirementMapping = this.ensureGoalRequirementMappingExists(event.requirement);        
        log ("OK c'est bon je retourne " + newGoalRequirementMapping)      
      }    
    }    
  
    @ActionScheme    
    FlexoConceptInstanceType<GoalRequirementMapping> ensureGoalRequirementMappingExists(FlexoConceptInstanceType<Requirement> requirement) {    
      List<FlexoConceptInstanceType<GoalRequirementMapping>> list = container.SelectFlexoConceptInstance(type=GoalRequirementMapping,where=where=(selected.requirement = parameters.requirement));      
      if (list.size > 0) {      
        return list.get(0);      
      } else {      
        return GoalRequirementMapping.createNewGoal(parameters.requirement);      
      }    
    }    
  
    @ActionScheme    
    private FlexoConceptInstanceType<SysMLKaosElementMapping> allocateAgent(FlexoConceptInstanceType<AgentGR> agentGR) {    
      log ("Allocate agent " + parameters.agentGR.agent)      
      FlexoConceptInstanceType<Element> newElement = element.createChildrenElement(parameters.agentGR.agent.name,parameters.agentGR.agent.description);      
      FlexoConceptInstanceType<SysMLKaosElementMapping> newDiagramMapping = SysMLKaosElementMapping.createNewDiagramForAgent(newElement,parameters.agentGR.agent,this);      
      for (assignmentGR : goalModelingDiagram.SelectFlexoConceptInstance(type=AgentAssignmentGR,where=where=(selected.agentGR = parameters.agentGR))) {      
        log ("On doit reporter le goal " + assignmentGR.goalGR.goal)        
        FlexoConceptInstanceType<GoalRequirementMapping> parentMapping = this.getGoalRequirementMapping(assignmentGR.goalGR.goal);        
        FlexoConceptInstanceType<Requirement> newRequirement = newElement.createRequirement(assignmentGR.goalGR.goal.name,assignmentGR.goalGR.goal.description);        
        FlexoConceptInstanceType<GoalRequirementMapping> newMapping = newDiagramMapping.ensureGoalRequirementMappingExists(newRequirement);        
        TopGoalRequirementMapping.create(parentMapping,newMapping)      
      }      
      return newDiagramMapping;    
    }    
  
    @ActionScheme    
    private FlexoConceptInstanceType<GoalRequirementMapping> getGoalRequirementMapping(FlexoConceptInstanceType<Goal> goal) {    
      List<FlexoConceptInstanceType<GoalRequirementMapping>> list = container.SelectFlexoConceptInstance(type=GoalRequirementMapping,where=where=(selected.goal = parameters.goal));      
      if (list.size > 0) {      
        return list.get(0);      
      } else {      
        return null;      
      }    
    }    
  
    @EventListener    
    Void requirementsShouldBeUpdated() {    
      log "OK, on doit mettre a jour les requirements"      
      MatchingSet matchingSet = this.initiateMatching(GoalRequirementMapping);      
      for (goalGR : goalModelingDiagram.SelectFlexoConceptInstance(type=GoalGR)) {      
        FlexoConceptInstanceType<GoalRequirementMapping> currentMapping = FML@RT::MatchFlexoConceptInstance as GoalRequirementMapping match=(goal=goalGR.goal) using GoalRequirementMapping:createNewRequirement(goalGR.goal);        
        if (currentMapping.requirement = null) {        
          log ("Bizarre, le req est null, faut le creer pour " + goalGR.goal.name)          
          currentMapping.requirement = Requirement.createRequirement(goalGR.goal.name,goalGR.goal.description);        
        }      
      }      
      matchingSet.finalizeMatching()    
    }    
  
  
    @FlexoConcept    
    public class GoalRequirementMapping {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Requirement> requirement;    
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Goal> goal;    
      
      @CreationScheme      
      GoalRequirementMapping:create(FlexoConceptInstanceType<Requirement> aRequirement, FlexoConceptInstanceType<Goal> aGoal) {      
        requirement = parameters.aRequirement;        
        goal = parameters.aGoal;      
      }      
      
      @DeletionScheme      
      Void delete() {      
        log ("Delete " + this)        
        requirement.delete();        
        container.element.firePropertyChange requirements      
      }      
      
      @EventListener      
      Void listenGoalDeletion() {      
        if (event.goal = goal) {        
          log ("Deleting goal " + goal)          
          this.delete();        
        }      
      }      
      
      @CreationScheme      
      GoalRequirementMapping:createNewGoal(FlexoConceptInstanceType<Requirement> requirement) {      
        requirement = parameters.requirement;        
        FlexoConceptInstanceType<FunctionalGoalGR> goalGR = FunctionalGoalGR.createTopFunctionalGoal(requirement.name,requirement.description,requirement.container.requirements.size);        
        log ("on vient de creer FunctionalGoalGR  " + goalGR)        
        goal = goalGR.goal;      
      }      
      
      @CreationScheme      
      GoalRequirementMapping:createNewRequirement(FlexoConceptInstanceType<Goal> goal) {      
        goal = parameters.goal;        
        requirement = Requirement.createRequirement(parameters.goal.name,parameters.goal.description);        
        log ("on vient de creer le requirement  " + requirement)      
      }      
      
    }    
  
    @FlexoConcept    
    public class TopGoalRequirementMapping {    
      
      @FlexoConceptInstanceRole(cardinality=One,readOnly=false)      
      public FlexoConceptInstanceType<GoalRequirementMapping> parentGoalRequirementMapping;    
      @FlexoConceptInstanceRole(cardinality=One,readOnly=false)      
      public FlexoConceptInstanceType<GoalRequirementMapping> goalRequirementMapping;    
      
      @CreationScheme      
      TopGoalRequirementMapping:create(FlexoConceptInstanceType<GoalRequirementMapping> parentMapping, FlexoConceptInstanceType<GoalRequirementMapping> mapping) {      
        parentGoalRequirementMapping = parameters.parentMapping;        
        goalRequirementMapping = parameters.mapping;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class DiagramMapping {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public VirtualModelInstanceType<GoalModelingDiagram> goalModelingDiagram;    
      
      @CreationScheme      
      DiagramMapping:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class GoalRequirementMapping {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Requirement> requirement;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Goal> goal;  
  
    @CreationScheme    
    GoalRequirementMapping:create(FlexoConceptInstanceType<Requirement> aRequirement, FlexoConceptInstanceType<Goal> aGoal) {    
      requirement = parameters.aRequirement;      
      goal = parameters.aGoal;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      log ("Delete " + this)      
      requirement.delete();      
      container.element.firePropertyChange requirements    
    }    
  
    @EventListener    
    Void listenGoalDeletion() {    
      if (event.goal = goal) {      
        log ("Deleting goal " + goal)        
        this.delete();      
      }    
    }    
  
    @CreationScheme    
    GoalRequirementMapping:createNewGoal(FlexoConceptInstanceType<Requirement> requirement) {    
      requirement = parameters.requirement;      
      FlexoConceptInstanceType<FunctionalGoalGR> goalGR = FunctionalGoalGR.createTopFunctionalGoal(requirement.name,requirement.description,requirement.container.requirements.size);      
      log ("on vient de creer FunctionalGoalGR  " + goalGR)      
      goal = goalGR.goal;    
    }    
  
    @CreationScheme    
    GoalRequirementMapping:createNewRequirement(FlexoConceptInstanceType<Goal> goal) {    
      goal = parameters.goal;      
      requirement = Requirement.createRequirement(parameters.goal.name,parameters.goal.description);      
      log ("on vient de creer le requirement  " + requirement)    
    }    
  
  }  

  @FlexoConcept  
  public class TopGoalRequirementMapping {  
  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<GoalRequirementMapping> parentGoalRequirementMapping;  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<GoalRequirementMapping> goalRequirementMapping;  
  
    @CreationScheme    
    TopGoalRequirementMapping:create(FlexoConceptInstanceType<GoalRequirementMapping> parentMapping, FlexoConceptInstanceType<GoalRequirementMapping> mapping) {    
      parentGoalRequirementMapping = parameters.parentMapping;      
      goalRequirementMapping = parameters.mapping;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class DiagramMapping {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public VirtualModelInstanceType<GoalModelingDiagram> goalModelingDiagram;  
  
    @CreationScheme    
    DiagramMapping:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
