use org.openflexo.foundation.fml.rt.FMLTechnologyAdapter as FML;
use org.openflexo.foundation.fml.rt.FMLRTTechnologyAdapter as FML@RT;
use org.openflexo.technologyadapter.gina.GINATechnologyAdapter as GINA;

import fdgfdssdf;





use A_TA as MonTA from file:///tmp/toto
use B_TA as MonTB from https://openflexo.org/khdkjshkj
use C_TA as MonTC from https://openflexo.org/ta_broker?id=2H54J // nommé MonTC

import java.lang.Thread as JavaThread  // nommé javaThread

import malibFML.truc   // nommé truc 

import function java.lang.Math.isPrime as is_prime

import org.openflexo.MonTypeAMoi as Truc // suppose qu'il existe MonTypeAMoi qui implémente CustomType

model MonModel extends UnAutreModel {

	concept Toto extends Titi,Tutu {

		String unStringQuiPeutEtreNull;
	    String[1,1] projectName;
		private String projectDescription;
		String[1,*] auMoinsUneValeur;
		String[0.*] yEnAPlusieurs;
		String[2,8] auMoins2AuPlus8;
		int titi,tutu,tata
		
		// Commentaire de Fabien: faire sans point-virgule
		// PAssage a la ligne suffit sinon point virgule obligatoire

		// Types primitifs FML: number,date,string

		type Natural is int with >= 0
		type Prime is int with >= 0 & is_prime
		type Id is int * int
		

		// définir des opérateurs avec nom par exemple +, +^l +**!, ... deviennent (+,""), (+,"^l") et (+,"**!")


		enum MonEnum { // Sylvain
			titi, tutu, tata;
		}

		type MonEnum is titi,toto,tutu // Fabien
		 // un seul mot cle concept avec un mot cle implemented pour ceux realise en java bytecode

	}
	
	
	
	concept relation {
	
	    (Natural * Natural) start_card
	    Card end_card
	
	}
	
	concept Card {
		int lowerBound
		int upperBound
	}
	
	concept Relation {
		Card start
		Card end
	}
	
	
	import GINAFibComponent projectUI with GINA::FIBComponentModelSlot
	
	
	GINAFibComponent(
			component=[ProjectUI.fib],
			assignments={data=a.binding,param1=another.binding}) projectUI
	
	
	
    GINAFibComponent projectUI with GINA::FIBComponentModelSlot(
			component=[ProjectUI.fib],
			assignments={data=a.binding,param1=another.binding});
	
	concept MonConcept {
		A a
		GINAFibComponent projectUI;
		GINAFibComponent toto;
	
		configure projectUI with GINA::FIBComponentModelSlot(
					component=[ProjectUI.fib],
					assignments={data=a.binding,param1=another.binding});
			 
		configure projectUI with GINA::AutreModelSlot(
					propriete=toto);
	}
			 
	concept TrucGR {
		Shape shape;
		Model model;
		
		configure shape with ShapeRole(templateShape=diagramBidule#12)
		
		init() {
			shape = Diagram::AddShape();
		}
	}
		
	concept TrucGR {
		RedShape shape;
		Model model;
		
		configure shape with ShapeRole(templateShape=diagramBidule#12)
		
		init() {
			shape = Diagram::AddShape();
		}
	}	 
		
	
	
 
}