/**
 * Testing structural properties
 */

use org.openflexo.foundation.fml.rt.FMLRTModelSlot as FMLRT;

import TonModel;

model MyModel {
	
	// Testing PrimitiveRole properties
	concept ConceptA {
		
	    String unStringQuiPeutEtreNull;
	    String[1,1] projectName; // A non-null String
	    String[1,*] atLeastAValue;
	    String[0,*] yEnAPlusieurs;
	    String... equivalentToPrevious;
	    String[2,8] auMoins2AuPlus8;
	    int titi = 2+3;
	    List<ConceptB>[0,*] aJavaListOfConceptB;
	    
	    String[1,*] atLeastAValue with java.util.Vector<String>;
	    ConceptB monB;
	    
	    // With a visibility identifier
	    // Default visibility is public
	    private String thisPropertyIsPrivate;
	    protected String thisOneIsProtected;
	    public String thisOneIsPublic; // Same as no visibility
	}

	// Testing FlexoConceptInstanceRole
	concept ConceptB {

		ConceptB aConceptB;
	    ConceptB[0,*] someConceptB;

	}

	// Test ExpressionProperty
	concept ConceptC {
		
		/*int aComputedValue = 0; // This is not an expression property, but a primitive with an init value
		int aComputedValue values 0; // Always return 0
		
		int aComputedValue = 0;
		int aComputedValue is toto+10; // SG+1
		int aComputedValue = `toto+10`; // JC+1, AB+1
		int aComputedValue = <toto+10>; // FD
		*/
		
		Person toto;
		int ageDeToto with toto.age;
		
		int aComputedValue values a.path.to.a.computed.value; // Compute that path
		int anOtherComputedValue values a.path().to.a.computed.value(1,2+toto,"foo"); // Compute that path

		DataBinding monBinding = new DataBinding(aString+"+10");
		
		//((ExpressionProperty)concept.getProperty("aComputedValue")).setExpression(monBinding);
		concept.aComputedValue = monBinding;

		//Person toto;
		//String leNomDeToto = `toto.nom`;
		
		String leNomDeToto = "tutu";

		binding<String> monBinding = `toto.nom`;
		String# ageDeToto = `toto.age`
		
		action() {
			leNomDeToto = "titi";
			
			ConceptC monC;
			
			int monEntier = monC.computedValue;
			
			int unAge = this.ageDeToto;
			
			concept.ageDeToto.setExpression(`toto.mere.age`);
			
			ageDeToto# = `toto.mere.age`;
			leNomDeToto#
			
		}
		
	}

	// Test AbstractProperty
	concept ConceptD {
		
		abstract int aValue;
		public abstract String aString;
		abstract Map<String,ConceptA> aMap;
		abstract ConceptB aConceptB;
		
		
	}

	// Test GetSetProperty
	concept ConceptE {
		
		private int internalValue;
		
		// A GetProperty
		int value {
			int get() {
				return internalValue;
			}		
		};
		
		// A GetSetProperty
		int settable_value {
			int get() {
				return internalValue;
			}
		
			set(int aValue) {
				fsddfs
				internalValue = aValue;
			}
		};
		
		
		settable_value = 4;
		
		// More compact syntax
		int settable_value {
			int get() { return internalValue; }		
			set(int aValue) { internalValue = aValue; }
		};
		
	}



}
