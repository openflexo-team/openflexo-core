/*
 * (c) Copyright 2014-2015 Openflexo
 *
 * This file is part of OpenFlexo.
 *
 * OpenFlexo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenFlexo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenFlexo. If not, see <http://www.gnu.org/licenses/>.
 *
 */

Package org.openflexo.foundation.fml.parser;


Helpers

// Note: Helpers have not been verified to exactly match the
// specification.

    unicode_input_character = [0..0xffff];
    ht  = 0x0009;
    lf  = 0x000a;
    ff  = 0x000c;
    cr  = 0x000d;
    sp  = ' ';

    line_terminator = lf | cr | cr lf;
    input_character = [unicode_input_character - [cr + lf]];

    not_star =    [input_character - '*'] | line_terminator;
    not_star_not_slash = [input_character - ['*' + '/']] | line_terminator;

    unicode_letter =
        [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
        [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
        [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
        [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
        [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
        [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
        [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
        [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
        [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
        [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
        [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
        [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
        [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
        [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
        [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
        [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
        [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
        [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
        [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
        [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
        [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
        [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
        [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
        [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
        [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
        [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
        [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
        [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
        [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
        [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
        [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
        [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
        [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
        [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
        [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
        [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
        [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
        [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
        [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
        [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
        [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
        [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
        [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
        [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
        [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
        [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
        [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
        [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
        [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
        [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
        [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
        [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
        [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];

    unicode_digit =
        [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9] | [0x0966..0x096f] |
        [0x09e6..0x09ef] | [0x0a66..0x0a6f] | [0x0ae6..0x0aef] | [0x0b66..0x0b6f] |
        [0x0be7..0x0bef] | [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f] |
        [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29] | [0xff10..0xff19];

    java_letter = unicode_letter | '$' | '_';

	// is it required ?
    java_letter_or_digit = unicode_letter | unicode_digit | '$' | '_';

	// is it required ?
    url_letter_or_digit = unicode_letter | unicode_digit | '$' | '_' | '.' | '/';

    non_zero_digit = ['1'..'9'];
    digit = ['0'..'9'];
    hex_digit = ['0'..'9'] | ['a'..'f'] | ['A'..'F'];
    octal_digit = ['0'..'7'];
    zero_to_three = ['0'..'3'];

    decimal_numeral = '0' | non_zero_digit digit*;
    hex_numeral = '0' ('x' | 'X') hex_digit+;
    octal_numeral = '0' octal_digit+;

    integer_type_suffix = 'l' | 'L';

    exponent_part = ('e' | 'E') ('+' | '-')? digit+;

    float_type_suffix = 'f' | 'F' | 'd' | 'D';

    single_character = [input_character - [''' + '\']];
    octal_escape = '\' (octal_digit octal_digit? | zero_to_three octal_digit octal_digit);
    escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\' | octal_escape;
    string_character = [input_character - ['"' + '\']] | escape_sequence;


Tokens

    dollar = '$';
    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    mod = '%';
    power = '^';
    lt = '<';
    gt = '>';
    lte = '<=';
    gte = '>=';
    and = '&';
    and2 = '&&';
    or = '|';
    or2 = '||';
    eq = '=';
    eq2 = '==';
    neq = '!=';
    not = '!';
    l_par = '(';
    r_par = ')';
    dot = '.';
    comma = ',';
    if_token = '?';
    pi = 'pi';
    cos = 'cos';
    acos = 'acos';
    sin = 'sin';
    asin = 'asin';
    tan = 'tan';
    atan = 'atan';
    log = 'log';
    exp = 'exp';
    sqrt = 'sqrt';
    true = 'true';
    false = 'false';
 
    at = '@';
    semi  = ';';
    colon = ':';
    l_bkt = '[';
    l_brc = '{';
    r_bkt = ']';
    r_brc = '}';
 
    // FML keywords
    model = 'model';
    concept = 'concept';
    use = 'use';
    as = 'as';
    import = 'import';   
    extends = 'extends';

	// Literals
 
    string_literal = '"' string_character* '"';
 
    character_literal = ''' (single_character | escape_sequence) ''';
 
    floating_point_literal =
        digit+ '.' digit* exponent_part? float_type_suffix? |
        '.' digit+ exponent_part? float_type_suffix? |
        digit+ exponent_part float_type_suffix? |
        digit+ exponent_part? float_type_suffix;

    integer_literal =
        decimal_numeral integer_type_suffix? |
        hex_numeral integer_type_suffix? |
        octal_numeral integer_type_suffix?;

    null_literal = 'null';
 
    // Take care to define your tokens before that !!!
    
    identifier = java_letter java_letter_or_digit*;

    blank = (' ' | 13 | 10)+;

    // white space and comments

    white_space = (sp | ht | ff | line_terminator)*;
    traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
    documentation_comment =    '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';
    end_of_line_comment = '//' input_character* line_terminator?;

Ignored Tokens

    blank,
    white_space,
    traditional_comment,
    documentation_comment,
    end_of_line_comment;


Productions

    fml_compilation_unit = [use_declarations]:use_declaration* [import_declarations]:import_declaration* model_declaration;

    use_declaration = use [model_slot]:dotted_identifier as [ta_id]:identifier semi;

    import_declaration = 
    	{java_import} import [java_class_name]:dotted_identifier semi |
    	{uri_import} import [object]:reference_by_uri semi;

	reference_by_uri = 
		{resource} l_bkt [resource]:expr r_bkt |
		{object_in_resource} l_bkt [resource]:expr colon [object]:expr r_bkt;


    model_declaration = [annotations]:annotation* model identifier super? l_brc  r_brc;

    concept_declaration = [annotations]:annotation* concept identifier super? l_brc r_brc;

    super =
        extends super_type_list;

    super_type_list =
        {one}  dotted_identifier |
        {many} super_type_list comma dotted_identifier;

    dotted_identifier =
        {identifier} identifier |
        {tail} identifier dot dotted_identifier;

	// Annotations
	annotation =
        {single_annotation}         single_annotation |
        {value_annotation}         value_annotation;

    single_annotation =
        at [tag]:dotted_identifier;

    value_annotation =
        at [tag]:dotted_identifier l_par expr r_par;
 

	// BEGIN Connie
    expr =
        {expr2} expr2 |
        {cond_expr} [condition]:expr if_token [then]:expr2 colon [else]:expr2 |
        {eq_expr} [left]:expr eq [right]:expr2 |
        {eq2_expr} [left]:expr eq2 [right]:expr2 |
        {neq_expr} [left]:expr neq [right]:expr2 |
        {lt_expr} [left]:expr lt [right]:expr2 |
        {gt_expr} [left]:expr gt [right]:expr2 |
        {lte_expr} [left]:expr lte [right]:expr2 |
        {gte_expr} [left]:expr gte [right]:expr2 ;

    expr2 =
        {expr3} expr3 |
        {or_expr} [left]:expr2 or [right]:expr3 |
        {or2_expr} [left]:expr2 or2 [right]:expr3 |
        {add_expr} [left]:expr2 plus [right]:expr3 |
        {sub_expr} [left]:expr2 minus [right]:expr3;
  
    expr3 =
        {term} term |
        {and_expr} [left]:expr3 and [right]:term |
        {and2_expr} [left]:expr3 and2 [right]:term |
        {mult_expr} [left]:expr3 mult [right]:term |
        {div_expr} [left]:expr3 div [right]:term |
        {mod_expr} [left]:expr3 mod [right]:term |
        {power_expr} [left]:expr3 power [right]:term |
        {not_expr} not term;
 
    type_reference = 
  		{basic} dollar type_reference_path |
  		{parametered} dollar type_reference_path type_reference_arg_list;

 	type_reference_path = 
  		{identifier} identifier |
  		{tail} identifier dot type_reference_path;

 	type_reference_arg_list = 
   		lt type_reference [type_reference_additional_args]:type_reference_additional_arg* gt;

 	type_reference_additional_arg = 
  		comma type_reference;

 	call = 
  		identifier arg_list ;

 	arg_list = 
  		{empty_list} l_par r_par |
  		{non_empty_list} l_par expr [additional_args]:additional_arg* r_par;

 	additional_arg = 
  		comma expr;

 	binding = 
  		{identifier} identifier |
  		{call} call |
  		{tail1} identifier dot binding |
  		{tail2} call dot binding;

 	function =
  		{cos_func} cos l_par expr2 r_par |
  		{acos_func} acos l_par expr2 r_par |
  		{sin_func} sin l_par expr2 r_par |
  		{asin_func} asin l_par expr2 r_par |
 		{tan_func} tan l_par expr2 r_par |
  		{atan_func} atan l_par expr2 r_par |
  		{exp_func} exp l_par expr2 r_par |
  		{log_func} log l_par expr2 r_par |
  		{sqrt_func} sqrt l_par expr2 r_par;

 	constant = 
  		{true} true |
  		{false} false |
  		{pi} pi;

 	term =
  		{negative} minus term |
  		{floating_point_literal} floating_point_literal |
  		{integer_literal} integer_literal |
  		{string_literal} string_literal |
  		{character_literal} character_literal |
  		{null_literal} null_literal |
  		{function} function |
  		{binding} binding |
  		{expr} l_par expr r_par |
  		{cast} l_par type_reference r_par term;


