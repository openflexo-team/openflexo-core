/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.analysis;

import java.util.*;
import org.openflexo.foundation.fml.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    public void caseANamespaceDeclaration(ANamespaceDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAUseDeclaration(AUseDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAImportDeclaration(AImportDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAViewPointMainDeclaration(AViewPointMainDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVirtualModelMainDeclaration(AVirtualModelMainDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoConceptMainDeclaration(AFlexoConceptMainDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAViewpointDeclaration(AViewpointDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVirtualModelDeclaration(AVirtualModelDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoConceptDeclaration(AFlexoConceptDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAModelSlotMemberVirtualModelBodyDeclaration(AModelSlotMemberVirtualModelBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoConceptVirtualModelBodyDeclaration(AFlexoConceptVirtualModelBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoConceptMemberVirtualModelBodyDeclaration(AFlexoConceptMemberVirtualModelBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoConceptMemberFlexoConceptBodyDeclaration(AFlexoConceptMemberFlexoConceptBodyDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoRoleFlexoConceptMemberDeclaration(AFlexoRoleFlexoConceptMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoBehaviourFlexoConceptMemberDeclaration(AFlexoBehaviourFlexoConceptMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFlexoConceptMemberDeclaration(AEmptyFlexoConceptMemberDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAModelSlotDeclaration(AModelSlotDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoRoleDeclaration(AFlexoRoleDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFlexoBehaviourDeclaration(AFlexoBehaviourDeclaration node)
    {
        defaultCase(node);
    }

    public void caseABlockFlexoBehaviourBody(ABlockFlexoBehaviourBody node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFlexoBehaviourBody(AEmptyFlexoBehaviourBody node)
    {
        defaultCase(node);
    }

    public void caseAOneFmlValuePairs(AOneFmlValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAManyFmlValuePairs(AManyFmlValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAFmlValuePair(AFmlValuePair node)
    {
        defaultCase(node);
    }

    public void caseAConditionalFmlValue(AConditionalFmlValue node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFmlValue(AIdentifierFmlValue node)
    {
        defaultCase(node);
    }

    public void caseAOneFormalArgumentsList(AOneFormalArgumentsList node)
    {
        defaultCase(node);
    }

    public void caseAManyFormalArgumentsList(AManyFormalArgumentsList node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveFormalArgument(APrimitiveFormalArgument node)
    {
        defaultCase(node);
    }

    public void caseAReferenceFormalArgument(AReferenceFormalArgument node)
    {
        defaultCase(node);
    }

    public void caseATechnologySpecificFormalArgument(ATechnologySpecificFormalArgument node)
    {
        defaultCase(node);
    }

    public void caseANormalAnnotationAnnotation(ANormalAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAMarkerAnnotationAnnotation(AMarkerAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseASingleElementAnnotationAnnotation(ASingleElementAnnotationAnnotation node)
    {
        defaultCase(node);
    }

    public void caseANormalAnnotation(ANormalAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAMarkerAnnotation(AMarkerAnnotation node)
    {
        defaultCase(node);
    }

    public void caseASingleElementAnnotation(ASingleElementAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAOneElementValuePairs(AOneElementValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAManyElementValuePairs(AManyElementValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAConditionalElementValue(AConditionalElementValue node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierElementValue(AIdentifierElementValue node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationElementValue(AAnnotationElementValue node)
    {
        defaultCase(node);
    }

    public void caseAArrayInitializerElementValue(AArrayInitializerElementValue node)
    {
        defaultCase(node);
    }

    public void caseAGtTypeParameters(AGtTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseAShrTypeParameters(AShrTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseAUshrTypeParameters(AUshrTypeParameters node)
    {
        defaultCase(node);
    }

    public void caseASuper(ASuper node)
    {
        defaultCase(node);
    }

    public void caseAOneSuperTypeList(AOneSuperTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManySuperTypeList(AManySuperTypeList node)
    {
        defaultCase(node);
    }

    public void caseAElementValuePair(AElementValuePair node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalExpression(ASimpleConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrExOrConditionalExpression(AQmarkOrExOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrExIdConditionalExpression(AQmarkOrExIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmarkOrIdOrConditionalExpression(AQmarkOrIdOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrOrIdIdConditionalExpression(AQmakrOrIdIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdExOrConditionalExpression(AQmakrIdExOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdExIdConditionalExpression(AQmakrIdExIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdIdOrConditionalExpression(AQmakrIdIdOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAQmakrIdIdIdConditionalExpression(AQmakrIdIdIdConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAElementValueArrayInitializer(AElementValueArrayInitializer node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterList(AOneTypeParameterList node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterList(AManyTypeParameterList node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterListShr(AOneTypeParameterListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterListShr(AManyTypeParameterListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneTypeParameterListUshr(AOneTypeParameterListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyTypeParameterListUshr(AManyTypeParameterListUshr node)
    {
        defaultCase(node);
    }

    public void caseAOneInterfaceTypeList(AOneInterfaceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyInterfaceTypeList(AManyInterfaceTypeList node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalOrExpression(ASimpleConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarOrOrConditionalOrExpression(ABarBarOrOrConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarOrIdConditionalOrExpression(ABarBarOrIdConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarIdOrConditionalOrExpression(ABarBarIdOrConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarBarIdIdConditionalOrExpression(ABarBarIdIdConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseAOneElementValues(AOneElementValues node)
    {
        defaultCase(node);
    }

    public void caseAManyElementValues(AManyElementValues node)
    {
        defaultCase(node);
    }

    public void caseATypeParameter(ATypeParameter node)
    {
        defaultCase(node);
    }

    public void caseATypeParameterShr(ATypeParameterShr node)
    {
        defaultCase(node);
    }

    public void caseATypeParameterUshr(ATypeParameterUshr node)
    {
        defaultCase(node);
    }

    public void caseAGtTypeArguments(AGtTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAShrTypeArguments(AShrTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAUshrTypeArguments(AUshrTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsShrNoGt(ATypeArgumentsShrNoGt node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsUshrNoGtGt(ATypeArgumentsUshrNoGtGt node)
    {
        defaultCase(node);
    }

    public void caseATypeArgumentsUshrNoGt(ATypeArgumentsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAInstanceInitializer(AInstanceInitializer node)
    {
        defaultCase(node);
    }

    public void caseAStaticInitializer(AStaticInitializer node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveConstantDeclaration(APrimitiveConstantDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceConstantDeclaration(AReferenceConstantDeclaration node)
    {
        defaultCase(node);
    }

    public void caseADefaultValue(ADefaultValue node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalAndExpression(ASimpleConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpAnOrConditionalAndExpression(AAmpAmpAnOrConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpAnIdConditionalAndExpression(AAmpAmpAnIdConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpIdOrConditionalAndExpression(AAmpAmpIdOrConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAmpIdIdConditionalAndExpression(AAmpAmpIdIdConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAConditionalAssignmentExpression(AConditionalAssignmentExpression node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentAssignmentExpression(AAssignmentAssignmentExpression node)
    {
        defaultCase(node);
    }

    public void caseATypeBound(ATypeBound node)
    {
        defaultCase(node);
    }

    public void caseAArgumentTypeBoundShr(AArgumentTypeBoundShr node)
    {
        defaultCase(node);
    }

    public void caseABoundTypeBoundShr(ABoundTypeBoundShr node)
    {
        defaultCase(node);
    }

    public void caseAArgumentTypeBoundUshr(AArgumentTypeBoundUshr node)
    {
        defaultCase(node);
    }

    public void caseABoundTypeBoundUshr(ABoundTypeBoundUshr node)
    {
        defaultCase(node);
    }

    public void caseATypeComponent(ATypeComponent node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentList(AOneActualTypeArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentList(AManyActualTypeArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListShr(AOneActualTypeArgumentListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListShr(AManyActualTypeArgumentListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListUshr(AOneActualTypeArgumentListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListUshr(AManyActualTypeArgumentListUshr node)
    {
        defaultCase(node);
    }

    public void caseAOneActualTypeArgumentListUshrNoGt(AOneActualTypeArgumentListUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAManyActualTypeArgumentListUshrNoGt(AManyActualTypeArgumentListUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    public void caseAThrows(AThrows node)
    {
        defaultCase(node);
    }

    public void caseAArguments(AArguments node)
    {
        defaultCase(node);
    }

    public void caseAOneVariableDeclarators(AOneVariableDeclarators node)
    {
        defaultCase(node);
    }

    public void caseAManyVariableDeclarators(AManyVariableDeclarators node)
    {
        defaultCase(node);
    }

    public void caseATechnologySpecificType(ATechnologySpecificType node)
    {
        defaultCase(node);
    }

    public void caseANumericPrimitiveType(ANumericPrimitiveType node)
    {
        defaultCase(node);
    }

    public void caseABooleanPrimitiveType(ABooleanPrimitiveType node)
    {
        defaultCase(node);
    }

    public void caseASimpleInclusiveOrExpression(ASimpleInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarOrOrInclusiveOrExpression(ABarOrOrInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarOrIdInclusiveOrExpression(ABarOrIdInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarIdOrInclusiveOrExpression(ABarIdOrInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseABarIdIdInclusiveOrExpression(ABarIdIdInclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionAssignment(AExpressionAssignment node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBound(AAdditionalBound node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBoundShrNoGt(AAdditionalBoundShrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalBoundUshrNoGtGt(AAdditionalBoundUshrNoGtGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveActualTypeArgument(APrimitiveActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgument(AReferenceActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgument(AWildcardActualTypeArgument node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentShr(AReferenceActualTypeArgumentShr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentShr(AWildcardActualTypeArgumentShr node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentUshr(AReferenceActualTypeArgumentUshr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentUshr(AWildcardActualTypeArgumentUshr node)
    {
        defaultCase(node);
    }

    public void caseAReferenceActualTypeArgumentUshrNoGt(AReferenceActualTypeArgumentUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAWildcardActualTypeArgumentUshrNoGt(AWildcardActualTypeArgumentUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclarationBlockStatement(AVariableDeclarationBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatementBlockStatement(AStatementBlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneFormalParameterList(AOneFormalParameterList node)
    {
        defaultCase(node);
    }

    public void caseAManyFormalParameterList(AManyFormalParameterList node)
    {
        defaultCase(node);
    }

    public void caseAOneExceptionTypeList(AOneExceptionTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyExceptionTypeList(AManyExceptionTypeList node)
    {
        defaultCase(node);
    }

    public void caseAOneExArgumentList(AOneExArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAOneIdArgumentList(AOneIdArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyExArgumentList(AManyExArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAManyIdArgumentList(AManyIdArgumentList node)
    {
        defaultCase(node);
    }

    public void caseASimpleVariableDeclarator(ASimpleVariableDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAInitializerVariableDeclarator(AInitializerVariableDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAIntegralNumericType(AIntegralNumericType node)
    {
        defaultCase(node);
    }

    public void caseAFloatingNumericType(AFloatingNumericType node)
    {
        defaultCase(node);
    }

    public void caseASimpleExclusiveOrExpression(ASimpleExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretOrAnExclusiveOrExpression(ACaretOrAnExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretOrIdExclusiveOrExpression(ACaretOrIdExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretIdAnExclusiveOrExpression(ACaretIdAnExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseACaretIdIdExclusiveOrExpression(ACaretIdIdExclusiveOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierLeftHandSide(AIdentifierLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAFieldLeftHandSide(AFieldLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAArrayLeftHandSide(AArrayLeftHandSide node)
    {
        defaultCase(node);
    }

    public void caseAAssignAssignmentOperator(AAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAStarAssignAssignmentOperator(AStarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseASlashAssignAssignmentOperator(ASlashAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAPercentAssignAssignmentOperator(APercentAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAPlusAssignAssignmentOperator(APlusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusAssignAssignmentOperator(AMinusAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAShlAssignAssignmentOperator(AShlAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAShrAssignAssignmentOperator(AShrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAUshrAssignAssignmentOperator(AUshrAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAAmpAssignAssignmentOperator(AAmpAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseACaretAssignAssignmentOperator(ACaretAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseABarAssignAssignmentOperator(ABarAssignAssignmentOperator node)
    {
        defaultCase(node);
    }

    public void caseAWildcard(AWildcard node)
    {
        defaultCase(node);
    }

    public void caseAWildcardShr(AWildcardShr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardUshr(AWildcardUshr node)
    {
        defaultCase(node);
    }

    public void caseAWildcardUshrNoGt(AWildcardUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseALocalVariableDeclarationStatement(ALocalVariableDeclarationStatement node)
    {
        defaultCase(node);
    }

    public void caseANoTrailStatement(ANoTrailStatement node)
    {
        defaultCase(node);
    }

    public void caseALabelStatement(ALabelStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileLoopStatement(AWhileLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAForLoopStatement(AForLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveVarArgLastFormalParameter(APrimitiveVarArgLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAReferenceVarArgLastFormalParameter(AReferenceVarArgLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseASimpleLastFormalParameter(ASimpleLastFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAOneFormalParameters(AOneFormalParameters node)
    {
        defaultCase(node);
    }

    public void caseAManyFormalParameters(AManyFormalParameters node)
    {
        defaultCase(node);
    }

    public void caseAExceptionType(AExceptionType node)
    {
        defaultCase(node);
    }

    public void caseAGtNonWildTypeArguments(AGtNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAShrNonWildTypeArguments(AShrNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseAUshrNonWildTypeArguments(AUshrNonWildTypeArguments node)
    {
        defaultCase(node);
    }

    public void caseANoArrayPrimary(ANoArrayPrimary node)
    {
        defaultCase(node);
    }

    public void caseAArrayPrimary(AArrayPrimary node)
    {
        defaultCase(node);
    }

    public void caseAExpressionVariableInitializer(AExpressionVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierVariableInitializer(AIdentifierVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAArrayVariableInitializer(AArrayVariableInitializer node)
    {
        defaultCase(node);
    }

    public void caseAByteIntegralType(AByteIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAShortIntegralType(AShortIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAIntIntegralType(AIntIntegralType node)
    {
        defaultCase(node);
    }

    public void caseALongIntegralType(ALongIntegralType node)
    {
        defaultCase(node);
    }

    public void caseACharIntegralType(ACharIntegralType node)
    {
        defaultCase(node);
    }

    public void caseAFloatFloatingPointType(AFloatFloatingPointType node)
    {
        defaultCase(node);
    }

    public void caseADoubleFloatingPointType(ADoubleFloatingPointType node)
    {
        defaultCase(node);
    }

    public void caseASimpleAndExpression(ASimpleAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAnEqAndExpression(AAmpAnEqAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpAnIdAndExpression(AAmpAnIdAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpIdEqAndExpression(AAmpIdEqAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAmpIdIdAndExpression(AAmpIdIdAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryFieldAccess(APrimaryFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseASuperFieldAccess(ASuperFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAReferenceSuperFieldAccess(AReferenceSuperFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExArrayAccess(APrimaryExArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryIdArrayAccess(APrimaryIdArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExArrayAccess(AIdentifierExArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIdArrayAccess(AIdentifierIdArrayAccess node)
    {
        defaultCase(node);
    }

    public void caseAExtendsPrimitiveWildcardBounds(AExtendsPrimitiveWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBounds(AExtendsReferenceWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseASuperPrimitiveWildcardBounds(ASuperPrimitiveWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBounds(ASuperReferenceWildcardBounds node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsShr(AExtendsReferenceWildcardBoundsShr node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsShr(ASuperReferenceWildcardBoundsShr node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsUshr(AExtendsReferenceWildcardBoundsUshr node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsUshr(ASuperReferenceWildcardBoundsUshr node)
    {
        defaultCase(node);
    }

    public void caseAExtendsReferenceWildcardBoundsUshrNoGt(AExtendsReferenceWildcardBoundsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseASuperReferenceWildcardBoundsUshrNoGt(ASuperReferenceWildcardBoundsUshrNoGt node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveLocalVariableDeclaration(APrimitiveLocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReferenceLocalVariableDeclaration(AReferenceLocalVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseABlockStatementWithoutTrailingSubstatement(ABlockStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStatementStatementWithoutTrailingSubstatement(AEmptyStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionStatementStatementWithoutTrailingSubstatement(AExpressionStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatementStatementWithoutTrailingSubstatement(AAssertStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseASwitchStatementStatementWithoutTrailingSubstatement(ASwitchStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseADoStatementStatementWithoutTrailingSubstatement(ADoStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseABreakStatementStatementWithoutTrailingSubstatement(ABreakStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAContinueStatementStatementWithoutTrailingSubstatement(AContinueStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatementStatementWithoutTrailingSubstatement(AReturnStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseASynchronizedStatementStatementWithoutTrailingSubstatement(ASynchronizedStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAThrowStatementStatementWithoutTrailingSubstatement(AThrowStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseATryStatementStatementWithoutTrailingSubstatement(ATryStatementStatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatement(ALabeledStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenStatement(AExpressionIfThenStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenStatement(AIdentifierIfThenStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenElseStatement(AExpressionIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenElseStatement(AIdentifierIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionWhileStatement(AExpressionWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierWhileStatement(AIdentifierWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseABasicForForStatement(ABasicForForStatement node)
    {
        defaultCase(node);
    }

    public void caseAEnhancedForForStatement(AEnhancedForForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveFormalParameter(APrimitiveFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAReferenceFormalParameter(AReferenceFormalParameter node)
    {
        defaultCase(node);
    }

    public void caseAOnePrimitiveReferenceTypeList(AOnePrimitiveReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeList(AOneReferenceReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyPrimitiveReferenceTypeList(AManyPrimitiveReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeList(AManyReferenceReferenceTypeList node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeListShr(AOneReferenceReferenceTypeListShr node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeListShr(AManyReferenceReferenceTypeListShr node)
    {
        defaultCase(node);
    }

    public void caseAOneReferenceReferenceTypeListUshr(AOneReferenceReferenceTypeListUshr node)
    {
        defaultCase(node);
    }

    public void caseAManyReferenceReferenceTypeListUshr(AManyReferenceReferenceTypeListUshr node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimaryNoNewArray(ALiteralPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAPrimitivePrimaryNoNewArray(APrimitivePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAReferencePrimaryNoNewArray(AReferencePrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAVoidPrimaryNoNewArray(AVoidPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAThisPrimaryNoNewArray(AThisPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAClassPrimaryNoNewArray(AClassPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPrimaryNoNewArray(AExpressionPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPrimaryNoNewArray(AIdentifierPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAFieldPrimaryNoNewArray(AFieldPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAMethodPrimaryNoNewArray(AMethodPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAArrayPrimaryNoNewArray(AArrayPrimaryNoNewArray node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveArrayCreationExpression(APrimitiveArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceArrayCreationExpression(AReferenceArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveInitializerArrayCreationExpression(APrimitiveInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceInitializerArrayCreationExpression(AReferenceInitializerArrayCreationExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayInitializer(AArrayInitializer node)
    {
        defaultCase(node);
    }

    public void caseAOneVariableInitializers(AOneVariableInitializers node)
    {
        defaultCase(node);
    }

    public void caseAManyVariableInitializers(AManyVariableInitializers node)
    {
        defaultCase(node);
    }

    public void caseASimpleEqualityExpression(ASimpleEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqEqReEqualityExpression(AEqEqReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqEqIdEqualityExpression(AEqEqIdEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqIdReEqualityExpression(AEqIdReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqIdIdEqualityExpression(AEqIdIdEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqEqReEqualityExpression(ANeqEqReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqEqIdEqualityExpression(ANeqEqIdEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqIdReEqualityExpression(ANeqIdReEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqIdIdEqualityExpression(ANeqIdIdEqualityExpression node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStatement(AEmptyStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionStatement(AExpressionStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneExAssertStatement(AOneExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAOneIdAssertStatement(AOneIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoExExAssertStatement(ATwoExExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoExIdAssertStatement(ATwoExIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoIdExAssertStatement(ATwoIdExAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseATwoIdIdAssertStatement(ATwoIdIdAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSwitchStatement(AExpressionSwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSwitchStatement(AIdentifierSwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionDoStatement(AExpressionDoStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDoStatement(AIdentifierDoStatement node)
    {
        defaultCase(node);
    }

    public void caseABreakStatement(ABreakStatement node)
    {
        defaultCase(node);
    }

    public void caseAContinueStatement(AContinueStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyReturnStatement(AEmptyReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionReturnStatement(AExpressionReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierReturnStatement(AIdentifierReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSynchronizedStatement(AExpressionSynchronizedStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSynchronizedStatement(AIdentifierSynchronizedStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionThrowStatement(AExpressionThrowStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierThrowStatement(AIdentifierThrowStatement node)
    {
        defaultCase(node);
    }

    public void caseACatchTryStatement(ACatchTryStatement node)
    {
        defaultCase(node);
    }

    public void caseAFinallyTryStatement(AFinallyTryStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatementWithoutTrailingSubstatementStatementNoShortIf(AStatementWithoutTrailingSubstatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatementNoShortIfStatementNoShortIf(ALabeledStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatementNoShortIfStatementNoShortIf(AIfThenElseStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatementNoShortIfStatementNoShortIf(AWhileStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAForStatementNoShortIfStatementNoShortIf(AForStatementNoShortIfStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEmptyBasicForStatement(AEmptyBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionBasicForStatement(AExpressionBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierBasicForStatement(AIdentifierBasicForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveExpressionEnhancedForStatement(APrimitiveExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveIdentifierEnhancedForStatement(APrimitiveIdentifierEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReferenceExpressionEnhancedForStatement(AReferenceExpressionEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReferenceIdentifierEnhancedForStatement(AReferenceIdentifierEnhancedForStatement node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseACharacterLiteral(ACharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleMethodInvocation(ASimpleMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseASuperMethodInvocation(ASuperMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAClassNameMethodInvocation(AClassNameMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseATypeNameMethodInvocation(ATypeNameMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAExpressionDimExpr(AExpressionDimExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDimExpr(AIdentifierDimExpr node)
    {
        defaultCase(node);
    }

    public void caseADim(ADim node)
    {
        defaultCase(node);
    }

    public void caseASimpleRelationalExpression(ASimpleRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtShShRelationalExpression(ALtShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtShIdRelationalExpression(ALtShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtIdShRelationalExpression(ALtIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtIdIdRelationalExpression(ALtIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtShShRelationalExpression(AGtShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtShIdRelationalExpression(AGtShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtIdShRelationalExpression(AGtIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtIdIdRelationalExpression(AGtIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqShShRelationalExpression(ALteqShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqShIdRelationalExpression(ALteqShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqIdShRelationalExpression(ALteqIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqIdIdRelationalExpression(ALteqIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqShShRelationalExpression(AGteqShShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqShIdRelationalExpression(AGteqShIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqIdShRelationalExpression(AGteqIdShRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqIdIdRelationalExpression(AGteqIdIdRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofShPrimitiveRelationalExpression(AInstanceofShPrimitiveRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofShReferenceRelationalExpression(AInstanceofShReferenceRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofIdPrimitiveRelationalExpression(AInstanceofIdPrimitiveRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofIdReferenceRelationalExpression(AInstanceofIdReferenceRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentStatementExpression(AAssignmentStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreIncrementStatementExpression(APreIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreDecrementStatementExpression(APreDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostIncrementStatementExpression(APostIncrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostDecrementStatementExpression(APostDecrementStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseAMethodInvocationStatementExpression(AMethodInvocationStatementExpression node)
    {
        defaultCase(node);
    }

    public void caseASwitchBlock(ASwitchBlock node)
    {
        defaultCase(node);
    }

    public void caseACatchClause(ACatchClause node)
    {
        defaultCase(node);
    }

    public void caseAFinally(AFinally node)
    {
        defaultCase(node);
    }

    public void caseALabeledStatementNoShortIf(ALabeledStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionIfThenElseStatementNoShortIf(AExpressionIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIfThenElseStatementNoShortIf(AIdentifierIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionWhileStatementNoShortIf(AExpressionWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierWhileStatementNoShortIf(AIdentifierWhileStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEmptyForStatementNoShortIf(AEmptyForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionForStatementNoShortIf(AExpressionForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierForStatementNoShortIf(AIdentifierForStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAStatementForInit(AStatementForInit node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclarationForInit(AVariableDeclarationForInit node)
    {
        defaultCase(node);
    }

    public void caseAForUpdate(AForUpdate node)
    {
        defaultCase(node);
    }

    public void caseASimpleShiftExpression(ASimpleShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlShAdShiftExpression(AShlShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlShIdShiftExpression(AShlShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlIdAdShiftExpression(AShlIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShlIdIdShiftExpression(AShlIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrShAdShiftExpression(AShrShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrShIdShiftExpression(AShrShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrIdAdShiftExpression(AShrIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAShrIdIdShiftExpression(AShrIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrShAdShiftExpression(AUshrShAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrShIdShiftExpression(AUshrShIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrIdAdShiftExpression(AUshrIdAdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAUshrIdIdShiftExpression(AUshrIdIdShiftExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPreIncrementExpression(AExpressionPreIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPreIncrementExpression(AIdentifierPreIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPreDecrementExpression(AExpressionPreDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPreDecrementExpression(AIdentifierPreDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPostIncrementExpression(AExpressionPostIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPostIncrementExpression(AIdentifierPostIncrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPostDecrementExpression(AExpressionPostDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPostDecrementExpression(AIdentifierPostDecrementExpression node)
    {
        defaultCase(node);
    }

    public void caseASwitchBlockStatementGroup(ASwitchBlockStatementGroup node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSwitchLabel(AExpressionSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSwitchLabel(AIdentifierSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseADefaultSwitchLabel(ADefaultSwitchLabel node)
    {
        defaultCase(node);
    }

    public void caseAOneStatementExpressionList(AOneStatementExpressionList node)
    {
        defaultCase(node);
    }

    public void caseAManyStatementExpressionList(AManyStatementExpressionList node)
    {
        defaultCase(node);
    }

    public void caseASimpleAdditiveExpression(ASimpleAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdMuAdditiveExpression(APlusAdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdIdAdditiveExpression(APlusAdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdMuAdditiveExpression(APlusIdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdIdAdditiveExpression(APlusIdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdMuAdditiveExpression(AMinusAdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdIdAdditiveExpression(AMinusAdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdMuAdditiveExpression(AMinusIdMuAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdIdAdditiveExpression(AMinusIdIdAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreIncrementUnaryExpression(APreIncrementUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreDecrementUnaryExpression(APreDecrementUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpressionUnaryExpression(APlusExpressionUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusIdentifierUnaryExpression(APlusIdentifierUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpressionUnaryExpression(AMinusExpressionUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusIdentifierUnaryExpression(AMinusIdentifierUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryPostfixExpression(APrimaryPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostIncrementPostfixExpression(APostIncrementPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostDecrementPostfixExpression(APostDecrementPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAConstantExpression(AConstantExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleMultiplicativeExpression(ASimpleMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarMuUnMultiplicativeExpression(AStarMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarMuIdMultiplicativeExpression(AStarMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarIdUnMultiplicativeExpression(AStarIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAStarIdIdMultiplicativeExpression(AStarIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashMuUnMultiplicativeExpression(ASlashMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashMuIdMultiplicativeExpression(ASlashMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashIdUnMultiplicativeExpression(ASlashIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseASlashIdIdMultiplicativeExpression(ASlashIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentMuUnMultiplicativeExpression(APercentMuUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentMuIdMultiplicativeExpression(APercentMuIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentIdUnMultiplicativeExpression(APercentIdUnMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPercentIdIdMultiplicativeExpression(APercentIdIdMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixUnaryExpressionNotPlusMinus(APostfixUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseATildeExpressionUnaryExpressionNotPlusMinus(ATildeExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseATildeIdentifierUnaryExpressionNotPlusMinus(ATildeIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAEmarkExpressionUnaryExpressionNotPlusMinus(AEmarkExpressionUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAEmarkIdentifierUnaryExpressionNotPlusMinus(AEmarkIdentifierUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseACastUnaryExpressionNotPlusMinus(ACastUnaryExpressionNotPlusMinus node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveExpressionCastExpression(APrimitiveExpressionCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveIdentifierCastExpression(APrimitiveIdentifierCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceExpressionCastExpression(AReferenceExpressionCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAReferenceIdentifierCastExpression(AReferenceIdentifierCastExpression node)
    {
        defaultCase(node);
    }

    public void caseAAbstractModifier(AAbstractModifier node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationModifier(AAnnotationModifier node)
    {
        defaultCase(node);
    }

    public void caseAFinalModifier(AFinalModifier node)
    {
        defaultCase(node);
    }

    public void caseANativeModifier(ANativeModifier node)
    {
        defaultCase(node);
    }

    public void caseAPrivateModifier(APrivateModifier node)
    {
        defaultCase(node);
    }

    public void caseAProtectedModifier(AProtectedModifier node)
    {
        defaultCase(node);
    }

    public void caseAPublicModifier(APublicModifier node)
    {
        defaultCase(node);
    }

    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    public void caseAStrictfpModifier(AStrictfpModifier node)
    {
        defaultCase(node);
    }

    public void caseASynchronizedModifier(ASynchronizedModifier node)
    {
        defaultCase(node);
    }

    public void caseATransientModifier(ATransientModifier node)
    {
        defaultCase(node);
    }

    public void caseAVolatileModifier(AVolatileModifier node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalIdentifier(AAdditionalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTDotDotDot(TDotDotDot node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    public void caseTAmpAssign(TAmpAssign node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTBarAssign(TBarAssign node)
    {
        defaultCase(node);
    }

    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTCaretAssign(TCaretAssign node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    public void caseTPercentAssign(TPercentAssign node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    public void caseTShl(TShl node)
    {
        defaultCase(node);
    }

    public void caseTShlAssign(TShlAssign node)
    {
        defaultCase(node);
    }

    public void caseTShr(TShr node)
    {
        defaultCase(node);
    }

    public void caseTShrAssign(TShrAssign node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTSlashAssign(TSlashAssign node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    public void caseTUshr(TUshr node)
    {
        defaultCase(node);
    }

    public void caseTUshrAssign(TUshrAssign node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    public void caseTByte(TByte node)
    {
        defaultCase(node);
    }

    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    public void caseTCatch(TCatch node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTClassToken(TClassToken node)
    {
        defaultCase(node);
    }

    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFinal(TFinal node)
    {
        defaultCase(node);
    }

    public void caseTFinallyToken(TFinallyToken node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTImplements(TImplements node)
    {
        defaultCase(node);
    }

    public void caseTInstanceof(TInstanceof node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTNative(TNative node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    public void caseTProtected(TProtected node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTStrictfp(TStrictfp node)
    {
        defaultCase(node);
    }

    public void caseTSuperToken(TSuperToken node)
    {
        defaultCase(node);
    }

    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    public void caseTSynchronized(TSynchronized node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTThrow(TThrow node)
    {
        defaultCase(node);
    }

    public void caseTThrowsToken(TThrowsToken node)
    {
        defaultCase(node);
    }

    public void caseTTransient(TTransient node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTTry(TTry node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTVolatile(TVolatile node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTNamespace(TNamespace node)
    {
        defaultCase(node);
    }

    public void caseTViewpoint(TViewpoint node)
    {
        defaultCase(node);
    }

    public void caseTVirtualmodel(TVirtualmodel node)
    {
        defaultCase(node);
    }

    public void caseTUse(TUse node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTModelslot(TModelslot node)
    {
        defaultCase(node);
    }

    public void caseTFlexoconcept(TFlexoconcept node)
    {
        defaultCase(node);
    }

    public void caseTRole(TRole node)
    {
        defaultCase(node);
    }

    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTNullLiteral(TNullLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTDocumentationComment(TDocumentationComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTUrl(TUrl node)
    {
        defaultCase(node);
    }

    public void caseTTaIdentifier(TTaIdentifier node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
