/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ANormalAnnotationAnnotation extends PAnnotation
{
    private PNormalAnnotation _normalAnnotation_;

    public ANormalAnnotationAnnotation()
    {
        // Constructor
    }

    public ANormalAnnotationAnnotation(
        @SuppressWarnings("hiding") PNormalAnnotation _normalAnnotation_)
    {
        // Constructor
        setNormalAnnotation(_normalAnnotation_);

    }

    @Override
    public Object clone()
    {
        return new ANormalAnnotationAnnotation(
            cloneNode(this._normalAnnotation_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANormalAnnotationAnnotation(this);
    }

    public PNormalAnnotation getNormalAnnotation()
    {
        return this._normalAnnotation_;
    }

    public void setNormalAnnotation(PNormalAnnotation node)
    {
        if(this._normalAnnotation_ != null)
        {
            this._normalAnnotation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._normalAnnotation_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._normalAnnotation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._normalAnnotation_ == child)
        {
            this._normalAnnotation_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._normalAnnotation_ == oldChild)
        {
            setNormalAnnotation((PNormalAnnotation) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
