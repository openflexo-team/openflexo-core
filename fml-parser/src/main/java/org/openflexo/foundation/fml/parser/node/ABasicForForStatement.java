/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABasicForForStatement extends PForStatement
{
    private PBasicForStatement _basicForStatement_;

    public ABasicForForStatement()
    {
        // Constructor
    }

    public ABasicForForStatement(
        @SuppressWarnings("hiding") PBasicForStatement _basicForStatement_)
    {
        // Constructor
        setBasicForStatement(_basicForStatement_);

    }

    @Override
    public Object clone()
    {
        return new ABasicForForStatement(
            cloneNode(this._basicForStatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABasicForForStatement(this);
    }

    public PBasicForStatement getBasicForStatement()
    {
        return this._basicForStatement_;
    }

    public void setBasicForStatement(PBasicForStatement node)
    {
        if(this._basicForStatement_ != null)
        {
            this._basicForStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._basicForStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._basicForStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._basicForStatement_ == child)
        {
            this._basicForStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._basicForStatement_ == oldChild)
        {
            setBasicForStatement((PBasicForStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
