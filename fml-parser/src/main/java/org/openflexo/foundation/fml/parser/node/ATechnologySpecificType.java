/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ATechnologySpecificType extends PTechnologySpecificType
{
    private TTaIdentifier _taIdentifier_;
    private TLPar _lPar_;
    private PFmlValuePairs _fmlValuePairs_;
    private TRPar _rPar_;

    public ATechnologySpecificType()
    {
        // Constructor
    }

    public ATechnologySpecificType(
        @SuppressWarnings("hiding") TTaIdentifier _taIdentifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PFmlValuePairs _fmlValuePairs_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setTaIdentifier(_taIdentifier_);

        setLPar(_lPar_);

        setFmlValuePairs(_fmlValuePairs_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ATechnologySpecificType(
            cloneNode(this._taIdentifier_),
            cloneNode(this._lPar_),
            cloneNode(this._fmlValuePairs_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATechnologySpecificType(this);
    }

    public TTaIdentifier getTaIdentifier()
    {
        return this._taIdentifier_;
    }

    public void setTaIdentifier(TTaIdentifier node)
    {
        if(this._taIdentifier_ != null)
        {
            this._taIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._taIdentifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PFmlValuePairs getFmlValuePairs()
    {
        return this._fmlValuePairs_;
    }

    public void setFmlValuePairs(PFmlValuePairs node)
    {
        if(this._fmlValuePairs_ != null)
        {
            this._fmlValuePairs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fmlValuePairs_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._taIdentifier_)
            + toString(this._lPar_)
            + toString(this._fmlValuePairs_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._taIdentifier_ == child)
        {
            this._taIdentifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._fmlValuePairs_ == child)
        {
            this._fmlValuePairs_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._taIdentifier_ == oldChild)
        {
            setTaIdentifier((TTaIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._fmlValuePairs_ == oldChild)
        {
            setFmlValuePairs((PFmlValuePairs) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
