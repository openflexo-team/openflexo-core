/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AGtTypeArguments extends PTypeArguments
{
    private TLt _lt_;
    private PActualTypeArgumentList _actualTypeArgumentList_;
    private TGt _gt_;

    public AGtTypeArguments()
    {
        // Constructor
    }

    public AGtTypeArguments(
        @SuppressWarnings("hiding") TLt _lt_,
        @SuppressWarnings("hiding") PActualTypeArgumentList _actualTypeArgumentList_,
        @SuppressWarnings("hiding") TGt _gt_)
    {
        // Constructor
        setLt(_lt_);

        setActualTypeArgumentList(_actualTypeArgumentList_);

        setGt(_gt_);

    }

    @Override
    public Object clone()
    {
        return new AGtTypeArguments(
            cloneNode(this._lt_),
            cloneNode(this._actualTypeArgumentList_),
            cloneNode(this._gt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGtTypeArguments(this);
    }

    public TLt getLt()
    {
        return this._lt_;
    }

    public void setLt(TLt node)
    {
        if(this._lt_ != null)
        {
            this._lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt_ = node;
    }

    public PActualTypeArgumentList getActualTypeArgumentList()
    {
        return this._actualTypeArgumentList_;
    }

    public void setActualTypeArgumentList(PActualTypeArgumentList node)
    {
        if(this._actualTypeArgumentList_ != null)
        {
            this._actualTypeArgumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._actualTypeArgumentList_ = node;
    }

    public TGt getGt()
    {
        return this._gt_;
    }

    public void setGt(TGt node)
    {
        if(this._gt_ != null)
        {
            this._gt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lt_)
            + toString(this._actualTypeArgumentList_)
            + toString(this._gt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lt_ == child)
        {
            this._lt_ = null;
            return;
        }

        if(this._actualTypeArgumentList_ == child)
        {
            this._actualTypeArgumentList_ = null;
            return;
        }

        if(this._gt_ == child)
        {
            this._gt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(this._actualTypeArgumentList_ == oldChild)
        {
            setActualTypeArgumentList((PActualTypeArgumentList) newChild);
            return;
        }

        if(this._gt_ == oldChild)
        {
            setGt((TGt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
