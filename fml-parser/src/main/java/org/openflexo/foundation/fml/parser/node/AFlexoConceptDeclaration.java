/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import java.util.*;
import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFlexoConceptDeclaration extends PFlexoConceptDeclaration
{
    private final LinkedList<PAnnotation> _annotations_ = new LinkedList<PAnnotation>();
    private TFlexoconcept _flexoconcept_;
    private TIdentifier _identifier_;
    private PSuper _super_;
    private TLBrc _lBrc_;
    private final LinkedList<PFlexoConceptBodyDeclaration> _flexoConceptBodyDeclarations_ = new LinkedList<PFlexoConceptBodyDeclaration>();
    private TRBrc _rBrc_;

    public AFlexoConceptDeclaration()
    {
        // Constructor
    }

    public AFlexoConceptDeclaration(
        @SuppressWarnings("hiding") List<PAnnotation> _annotations_,
        @SuppressWarnings("hiding") TFlexoconcept _flexoconcept_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PSuper _super_,
        @SuppressWarnings("hiding") TLBrc _lBrc_,
        @SuppressWarnings("hiding") List<PFlexoConceptBodyDeclaration> _flexoConceptBodyDeclarations_,
        @SuppressWarnings("hiding") TRBrc _rBrc_)
    {
        // Constructor
        setAnnotations(_annotations_);

        setFlexoconcept(_flexoconcept_);

        setIdentifier(_identifier_);

        setSuper(_super_);

        setLBrc(_lBrc_);

        setFlexoConceptBodyDeclarations(_flexoConceptBodyDeclarations_);

        setRBrc(_rBrc_);

    }

    @Override
    public Object clone()
    {
        return new AFlexoConceptDeclaration(
            cloneList(this._annotations_),
            cloneNode(this._flexoconcept_),
            cloneNode(this._identifier_),
            cloneNode(this._super_),
            cloneNode(this._lBrc_),
            cloneList(this._flexoConceptBodyDeclarations_),
            cloneNode(this._rBrc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFlexoConceptDeclaration(this);
    }

    public LinkedList<PAnnotation> getAnnotations()
    {
        return this._annotations_;
    }

    public void setAnnotations(List<PAnnotation> list)
    {
        this._annotations_.clear();
        this._annotations_.addAll(list);
        for(PAnnotation e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TFlexoconcept getFlexoconcept()
    {
        return this._flexoconcept_;
    }

    public void setFlexoconcept(TFlexoconcept node)
    {
        if(this._flexoconcept_ != null)
        {
            this._flexoconcept_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._flexoconcept_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PSuper getSuper()
    {
        return this._super_;
    }

    public void setSuper(PSuper node)
    {
        if(this._super_ != null)
        {
            this._super_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._super_ = node;
    }

    public TLBrc getLBrc()
    {
        return this._lBrc_;
    }

    public void setLBrc(TLBrc node)
    {
        if(this._lBrc_ != null)
        {
            this._lBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrc_ = node;
    }

    public LinkedList<PFlexoConceptBodyDeclaration> getFlexoConceptBodyDeclarations()
    {
        return this._flexoConceptBodyDeclarations_;
    }

    public void setFlexoConceptBodyDeclarations(List<PFlexoConceptBodyDeclaration> list)
    {
        this._flexoConceptBodyDeclarations_.clear();
        this._flexoConceptBodyDeclarations_.addAll(list);
        for(PFlexoConceptBodyDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrc getRBrc()
    {
        return this._rBrc_;
    }

    public void setRBrc(TRBrc node)
    {
        if(this._rBrc_ != null)
        {
            this._rBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._annotations_)
            + toString(this._flexoconcept_)
            + toString(this._identifier_)
            + toString(this._super_)
            + toString(this._lBrc_)
            + toString(this._flexoConceptBodyDeclarations_)
            + toString(this._rBrc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._annotations_.remove(child))
        {
            return;
        }

        if(this._flexoconcept_ == child)
        {
            this._flexoconcept_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._super_ == child)
        {
            this._super_ = null;
            return;
        }

        if(this._lBrc_ == child)
        {
            this._lBrc_ = null;
            return;
        }

        if(this._flexoConceptBodyDeclarations_.remove(child))
        {
            return;
        }

        if(this._rBrc_ == child)
        {
            this._rBrc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PAnnotation> i = this._annotations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAnnotation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._flexoconcept_ == oldChild)
        {
            setFlexoconcept((TFlexoconcept) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._super_ == oldChild)
        {
            setSuper((PSuper) newChild);
            return;
        }

        if(this._lBrc_ == oldChild)
        {
            setLBrc((TLBrc) newChild);
            return;
        }

        for(ListIterator<PFlexoConceptBodyDeclaration> i = this._flexoConceptBodyDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFlexoConceptBodyDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrc_ == oldChild)
        {
            setRBrc((TRBrc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
