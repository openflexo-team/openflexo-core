/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import java.util.*;
import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AUseDeclaration extends PUseDeclaration
{
    private TUse _use_;
    private TIdentifier _technologyAdapter_;
    private final LinkedList<PAdditionalIdentifier> _technologyAdapterAdditionalIdentifiers_ = new LinkedList<PAdditionalIdentifier>();
    private TAs _as_;
    private TIdentifier _taId_;
    private TSemi _semi_;

    public AUseDeclaration()
    {
        // Constructor
    }

    public AUseDeclaration(
        @SuppressWarnings("hiding") TUse _use_,
        @SuppressWarnings("hiding") TIdentifier _technologyAdapter_,
        @SuppressWarnings("hiding") List<PAdditionalIdentifier> _technologyAdapterAdditionalIdentifiers_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") TIdentifier _taId_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setUse(_use_);

        setTechnologyAdapter(_technologyAdapter_);

        setTechnologyAdapterAdditionalIdentifiers(_technologyAdapterAdditionalIdentifiers_);

        setAs(_as_);

        setTaId(_taId_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AUseDeclaration(
            cloneNode(this._use_),
            cloneNode(this._technologyAdapter_),
            cloneList(this._technologyAdapterAdditionalIdentifiers_),
            cloneNode(this._as_),
            cloneNode(this._taId_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUseDeclaration(this);
    }

    public TUse getUse()
    {
        return this._use_;
    }

    public void setUse(TUse node)
    {
        if(this._use_ != null)
        {
            this._use_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._use_ = node;
    }

    public TIdentifier getTechnologyAdapter()
    {
        return this._technologyAdapter_;
    }

    public void setTechnologyAdapter(TIdentifier node)
    {
        if(this._technologyAdapter_ != null)
        {
            this._technologyAdapter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._technologyAdapter_ = node;
    }

    public LinkedList<PAdditionalIdentifier> getTechnologyAdapterAdditionalIdentifiers()
    {
        return this._technologyAdapterAdditionalIdentifiers_;
    }

    public void setTechnologyAdapterAdditionalIdentifiers(List<PAdditionalIdentifier> list)
    {
        this._technologyAdapterAdditionalIdentifiers_.clear();
        this._technologyAdapterAdditionalIdentifiers_.addAll(list);
        for(PAdditionalIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public TIdentifier getTaId()
    {
        return this._taId_;
    }

    public void setTaId(TIdentifier node)
    {
        if(this._taId_ != null)
        {
            this._taId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._taId_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._use_)
            + toString(this._technologyAdapter_)
            + toString(this._technologyAdapterAdditionalIdentifiers_)
            + toString(this._as_)
            + toString(this._taId_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._use_ == child)
        {
            this._use_ = null;
            return;
        }

        if(this._technologyAdapter_ == child)
        {
            this._technologyAdapter_ = null;
            return;
        }

        if(this._technologyAdapterAdditionalIdentifiers_.remove(child))
        {
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._taId_ == child)
        {
            this._taId_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._use_ == oldChild)
        {
            setUse((TUse) newChild);
            return;
        }

        if(this._technologyAdapter_ == oldChild)
        {
            setTechnologyAdapter((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PAdditionalIdentifier> i = this._technologyAdapterAdditionalIdentifiers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._taId_ == oldChild)
        {
            setTaId((TIdentifier) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
