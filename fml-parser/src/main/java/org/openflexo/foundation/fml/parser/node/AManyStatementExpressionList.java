/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AManyStatementExpressionList extends PStatementExpressionList
{
    private PStatementExpressionList _statementExpressionList_;
    private TComma _comma_;
    private PStatementExpression _statementExpression_;

    public AManyStatementExpressionList()
    {
        // Constructor
    }

    public AManyStatementExpressionList(
        @SuppressWarnings("hiding") PStatementExpressionList _statementExpressionList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PStatementExpression _statementExpression_)
    {
        // Constructor
        setStatementExpressionList(_statementExpressionList_);

        setComma(_comma_);

        setStatementExpression(_statementExpression_);

    }

    @Override
    public Object clone()
    {
        return new AManyStatementExpressionList(
            cloneNode(this._statementExpressionList_),
            cloneNode(this._comma_),
            cloneNode(this._statementExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAManyStatementExpressionList(this);
    }

    public PStatementExpressionList getStatementExpressionList()
    {
        return this._statementExpressionList_;
    }

    public void setStatementExpressionList(PStatementExpressionList node)
    {
        if(this._statementExpressionList_ != null)
        {
            this._statementExpressionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementExpressionList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PStatementExpression getStatementExpression()
    {
        return this._statementExpression_;
    }

    public void setStatementExpression(PStatementExpression node)
    {
        if(this._statementExpression_ != null)
        {
            this._statementExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._statementExpressionList_)
            + toString(this._comma_)
            + toString(this._statementExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._statementExpressionList_ == child)
        {
            this._statementExpressionList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._statementExpression_ == child)
        {
            this._statementExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._statementExpressionList_ == oldChild)
        {
            setStatementExpressionList((PStatementExpressionList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._statementExpression_ == oldChild)
        {
            setStatementExpression((PStatementExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
