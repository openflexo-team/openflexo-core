/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AStatementWithoutTrailingSubstatementStatementNoShortIf extends PStatementNoShortIf
{
    private PStatementWithoutTrailingSubstatement _statementWithoutTrailingSubstatement_;

    public AStatementWithoutTrailingSubstatementStatementNoShortIf()
    {
        // Constructor
    }

    public AStatementWithoutTrailingSubstatementStatementNoShortIf(
        @SuppressWarnings("hiding") PStatementWithoutTrailingSubstatement _statementWithoutTrailingSubstatement_)
    {
        // Constructor
        setStatementWithoutTrailingSubstatement(_statementWithoutTrailingSubstatement_);

    }

    @Override
    public Object clone()
    {
        return new AStatementWithoutTrailingSubstatementStatementNoShortIf(
            cloneNode(this._statementWithoutTrailingSubstatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatementWithoutTrailingSubstatementStatementNoShortIf(this);
    }

    public PStatementWithoutTrailingSubstatement getStatementWithoutTrailingSubstatement()
    {
        return this._statementWithoutTrailingSubstatement_;
    }

    public void setStatementWithoutTrailingSubstatement(PStatementWithoutTrailingSubstatement node)
    {
        if(this._statementWithoutTrailingSubstatement_ != null)
        {
            this._statementWithoutTrailingSubstatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementWithoutTrailingSubstatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._statementWithoutTrailingSubstatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._statementWithoutTrailingSubstatement_ == child)
        {
            this._statementWithoutTrailingSubstatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._statementWithoutTrailingSubstatement_ == oldChild)
        {
            setStatementWithoutTrailingSubstatement((PStatementWithoutTrailingSubstatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
