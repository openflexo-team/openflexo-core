/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AGteqShShRelationalExpression extends PRelationalExpression
{
    private PShiftExpression _shiftExpression1_;
    private TGteq _gteq_;
    private PShiftExpression _shiftExpression2_;

    public AGteqShShRelationalExpression()
    {
        // Constructor
    }

    public AGteqShShRelationalExpression(
        @SuppressWarnings("hiding") PShiftExpression _shiftExpression1_,
        @SuppressWarnings("hiding") TGteq _gteq_,
        @SuppressWarnings("hiding") PShiftExpression _shiftExpression2_)
    {
        // Constructor
        setShiftExpression1(_shiftExpression1_);

        setGteq(_gteq_);

        setShiftExpression2(_shiftExpression2_);

    }

    @Override
    public Object clone()
    {
        return new AGteqShShRelationalExpression(
            cloneNode(this._shiftExpression1_),
            cloneNode(this._gteq_),
            cloneNode(this._shiftExpression2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGteqShShRelationalExpression(this);
    }

    public PShiftExpression getShiftExpression1()
    {
        return this._shiftExpression1_;
    }

    public void setShiftExpression1(PShiftExpression node)
    {
        if(this._shiftExpression1_ != null)
        {
            this._shiftExpression1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftExpression1_ = node;
    }

    public TGteq getGteq()
    {
        return this._gteq_;
    }

    public void setGteq(TGteq node)
    {
        if(this._gteq_ != null)
        {
            this._gteq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gteq_ = node;
    }

    public PShiftExpression getShiftExpression2()
    {
        return this._shiftExpression2_;
    }

    public void setShiftExpression2(PShiftExpression node)
    {
        if(this._shiftExpression2_ != null)
        {
            this._shiftExpression2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftExpression2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._shiftExpression1_)
            + toString(this._gteq_)
            + toString(this._shiftExpression2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._shiftExpression1_ == child)
        {
            this._shiftExpression1_ = null;
            return;
        }

        if(this._gteq_ == child)
        {
            this._gteq_ = null;
            return;
        }

        if(this._shiftExpression2_ == child)
        {
            this._shiftExpression2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._shiftExpression1_ == oldChild)
        {
            setShiftExpression1((PShiftExpression) newChild);
            return;
        }

        if(this._gteq_ == oldChild)
        {
            setGteq((TGteq) newChild);
            return;
        }

        if(this._shiftExpression2_ == oldChild)
        {
            setShiftExpression2((PShiftExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
