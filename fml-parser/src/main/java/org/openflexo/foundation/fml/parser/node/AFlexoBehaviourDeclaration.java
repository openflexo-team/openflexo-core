/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import java.util.*;
import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFlexoBehaviourDeclaration extends PFlexoBehaviourDeclaration
{
    private final LinkedList<PAnnotation> _annotations_ = new LinkedList<PAnnotation>();
    private TTaIdentifier _taIdentifier_;
    private TIdentifier _identifier_;
    private TLPar _lPar_;
    private PFormalArgumentsList _formalArgumentsList_;
    private TRPar _rPar_;
    private PFlexoBehaviourBody _flexoBehaviourBody_;

    public AFlexoBehaviourDeclaration()
    {
        // Constructor
    }

    public AFlexoBehaviourDeclaration(
        @SuppressWarnings("hiding") List<PAnnotation> _annotations_,
        @SuppressWarnings("hiding") TTaIdentifier _taIdentifier_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PFormalArgumentsList _formalArgumentsList_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PFlexoBehaviourBody _flexoBehaviourBody_)
    {
        // Constructor
        setAnnotations(_annotations_);

        setTaIdentifier(_taIdentifier_);

        setIdentifier(_identifier_);

        setLPar(_lPar_);

        setFormalArgumentsList(_formalArgumentsList_);

        setRPar(_rPar_);

        setFlexoBehaviourBody(_flexoBehaviourBody_);

    }

    @Override
    public Object clone()
    {
        return new AFlexoBehaviourDeclaration(
            cloneList(this._annotations_),
            cloneNode(this._taIdentifier_),
            cloneNode(this._identifier_),
            cloneNode(this._lPar_),
            cloneNode(this._formalArgumentsList_),
            cloneNode(this._rPar_),
            cloneNode(this._flexoBehaviourBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFlexoBehaviourDeclaration(this);
    }

    public LinkedList<PAnnotation> getAnnotations()
    {
        return this._annotations_;
    }

    public void setAnnotations(List<PAnnotation> list)
    {
        this._annotations_.clear();
        this._annotations_.addAll(list);
        for(PAnnotation e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TTaIdentifier getTaIdentifier()
    {
        return this._taIdentifier_;
    }

    public void setTaIdentifier(TTaIdentifier node)
    {
        if(this._taIdentifier_ != null)
        {
            this._taIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._taIdentifier_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PFormalArgumentsList getFormalArgumentsList()
    {
        return this._formalArgumentsList_;
    }

    public void setFormalArgumentsList(PFormalArgumentsList node)
    {
        if(this._formalArgumentsList_ != null)
        {
            this._formalArgumentsList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalArgumentsList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PFlexoBehaviourBody getFlexoBehaviourBody()
    {
        return this._flexoBehaviourBody_;
    }

    public void setFlexoBehaviourBody(PFlexoBehaviourBody node)
    {
        if(this._flexoBehaviourBody_ != null)
        {
            this._flexoBehaviourBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._flexoBehaviourBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._annotations_)
            + toString(this._taIdentifier_)
            + toString(this._identifier_)
            + toString(this._lPar_)
            + toString(this._formalArgumentsList_)
            + toString(this._rPar_)
            + toString(this._flexoBehaviourBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._annotations_.remove(child))
        {
            return;
        }

        if(this._taIdentifier_ == child)
        {
            this._taIdentifier_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._formalArgumentsList_ == child)
        {
            this._formalArgumentsList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._flexoBehaviourBody_ == child)
        {
            this._flexoBehaviourBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PAnnotation> i = this._annotations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAnnotation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._taIdentifier_ == oldChild)
        {
            setTaIdentifier((TTaIdentifier) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._formalArgumentsList_ == oldChild)
        {
            setFormalArgumentsList((PFormalArgumentsList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._flexoBehaviourBody_ == oldChild)
        {
            setFlexoBehaviourBody((PFlexoBehaviourBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
