/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASuper extends PSuper
{
    private TExtends _extends_;
    private PSuperTypeList _superTypeList_;

    public ASuper()
    {
        // Constructor
    }

    public ASuper(
        @SuppressWarnings("hiding") TExtends _extends_,
        @SuppressWarnings("hiding") PSuperTypeList _superTypeList_)
    {
        // Constructor
        setExtends(_extends_);

        setSuperTypeList(_superTypeList_);

    }

    @Override
    public Object clone()
    {
        return new ASuper(
            cloneNode(this._extends_),
            cloneNode(this._superTypeList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASuper(this);
    }

    public TExtends getExtends()
    {
        return this._extends_;
    }

    public void setExtends(TExtends node)
    {
        if(this._extends_ != null)
        {
            this._extends_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extends_ = node;
    }

    public PSuperTypeList getSuperTypeList()
    {
        return this._superTypeList_;
    }

    public void setSuperTypeList(PSuperTypeList node)
    {
        if(this._superTypeList_ != null)
        {
            this._superTypeList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._superTypeList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._extends_)
            + toString(this._superTypeList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._extends_ == child)
        {
            this._extends_ = null;
            return;
        }

        if(this._superTypeList_ == child)
        {
            this._superTypeList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._extends_ == oldChild)
        {
            setExtends((TExtends) newChild);
            return;
        }

        if(this._superTypeList_ == oldChild)
        {
            setSuperTypeList((PSuperTypeList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
