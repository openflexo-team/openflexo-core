/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AReturnStatementStatementWithoutTrailingSubstatement extends PStatementWithoutTrailingSubstatement
{
    private PReturnStatement _returnStatement_;

    public AReturnStatementStatementWithoutTrailingSubstatement()
    {
        // Constructor
    }

    public AReturnStatementStatementWithoutTrailingSubstatement(
        @SuppressWarnings("hiding") PReturnStatement _returnStatement_)
    {
        // Constructor
        setReturnStatement(_returnStatement_);

    }

    @Override
    public Object clone()
    {
        return new AReturnStatementStatementWithoutTrailingSubstatement(
            cloneNode(this._returnStatement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReturnStatementStatementWithoutTrailingSubstatement(this);
    }

    public PReturnStatement getReturnStatement()
    {
        return this._returnStatement_;
    }

    public void setReturnStatement(PReturnStatement node)
    {
        if(this._returnStatement_ != null)
        {
            this._returnStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._returnStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._returnStatement_ == child)
        {
            this._returnStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._returnStatement_ == oldChild)
        {
            setReturnStatement((PReturnStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
