/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleInclusiveOrExpression extends PInclusiveOrExpression
{
    private PExclusiveOrExpression _exclusiveOrExpression_;

    public ASimpleInclusiveOrExpression()
    {
        // Constructor
    }

    public ASimpleInclusiveOrExpression(
        @SuppressWarnings("hiding") PExclusiveOrExpression _exclusiveOrExpression_)
    {
        // Constructor
        setExclusiveOrExpression(_exclusiveOrExpression_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleInclusiveOrExpression(
            cloneNode(this._exclusiveOrExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleInclusiveOrExpression(this);
    }

    public PExclusiveOrExpression getExclusiveOrExpression()
    {
        return this._exclusiveOrExpression_;
    }

    public void setExclusiveOrExpression(PExclusiveOrExpression node)
    {
        if(this._exclusiveOrExpression_ != null)
        {
            this._exclusiveOrExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exclusiveOrExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exclusiveOrExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exclusiveOrExpression_ == child)
        {
            this._exclusiveOrExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exclusiveOrExpression_ == oldChild)
        {
            setExclusiveOrExpression((PExclusiveOrExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
