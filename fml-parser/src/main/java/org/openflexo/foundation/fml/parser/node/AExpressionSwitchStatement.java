/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionSwitchStatement extends PSwitchStatement
{
    private TSwitch _switch_;
    private TLPar _lPar_;
    private PExpression _expression_;
    private TRPar _rPar_;
    private PSwitchBlock _switchBlock_;

    public AExpressionSwitchStatement()
    {
        // Constructor
    }

    public AExpressionSwitchStatement(
        @SuppressWarnings("hiding") TSwitch _switch_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PSwitchBlock _switchBlock_)
    {
        // Constructor
        setSwitch(_switch_);

        setLPar(_lPar_);

        setExpression(_expression_);

        setRPar(_rPar_);

        setSwitchBlock(_switchBlock_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionSwitchStatement(
            cloneNode(this._switch_),
            cloneNode(this._lPar_),
            cloneNode(this._expression_),
            cloneNode(this._rPar_),
            cloneNode(this._switchBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionSwitchStatement(this);
    }

    public TSwitch getSwitch()
    {
        return this._switch_;
    }

    public void setSwitch(TSwitch node)
    {
        if(this._switch_ != null)
        {
            this._switch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switch_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PSwitchBlock getSwitchBlock()
    {
        return this._switchBlock_;
    }

    public void setSwitchBlock(PSwitchBlock node)
    {
        if(this._switchBlock_ != null)
        {
            this._switchBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switchBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._switch_)
            + toString(this._lPar_)
            + toString(this._expression_)
            + toString(this._rPar_)
            + toString(this._switchBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._switch_ == child)
        {
            this._switch_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._switchBlock_ == child)
        {
            this._switchBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._switch_ == oldChild)
        {
            setSwitch((TSwitch) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._switchBlock_ == oldChild)
        {
            setSwitchBlock((PSwitchBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
