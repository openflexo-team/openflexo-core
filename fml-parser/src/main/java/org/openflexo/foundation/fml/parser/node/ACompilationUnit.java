/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.openflexo.foundation.fml.parser.node;

import java.util.*;
import org.openflexo.foundation.fml.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACompilationUnit extends PCompilationUnit
{
    private PNamespaceDeclaration _namespaceDeclaration_;
    private final LinkedList<PUseDeclaration> _useDeclarations_ = new LinkedList<PUseDeclaration>();
    private final LinkedList<PImportDeclaration> _importDeclarations_ = new LinkedList<PImportDeclaration>();
    private PMainDeclaration _mainDeclaration_;

    public ACompilationUnit()
    {
        // Constructor
    }

    public ACompilationUnit(
        @SuppressWarnings("hiding") PNamespaceDeclaration _namespaceDeclaration_,
        @SuppressWarnings("hiding") List<PUseDeclaration> _useDeclarations_,
        @SuppressWarnings("hiding") List<PImportDeclaration> _importDeclarations_,
        @SuppressWarnings("hiding") PMainDeclaration _mainDeclaration_)
    {
        // Constructor
        setNamespaceDeclaration(_namespaceDeclaration_);

        setUseDeclarations(_useDeclarations_);

        setImportDeclarations(_importDeclarations_);

        setMainDeclaration(_mainDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ACompilationUnit(
            cloneNode(this._namespaceDeclaration_),
            cloneList(this._useDeclarations_),
            cloneList(this._importDeclarations_),
            cloneNode(this._mainDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompilationUnit(this);
    }

    public PNamespaceDeclaration getNamespaceDeclaration()
    {
        return this._namespaceDeclaration_;
    }

    public void setNamespaceDeclaration(PNamespaceDeclaration node)
    {
        if(this._namespaceDeclaration_ != null)
        {
            this._namespaceDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._namespaceDeclaration_ = node;
    }

    public LinkedList<PUseDeclaration> getUseDeclarations()
    {
        return this._useDeclarations_;
    }

    public void setUseDeclarations(List<PUseDeclaration> list)
    {
        this._useDeclarations_.clear();
        this._useDeclarations_.addAll(list);
        for(PUseDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PImportDeclaration> getImportDeclarations()
    {
        return this._importDeclarations_;
    }

    public void setImportDeclarations(List<PImportDeclaration> list)
    {
        this._importDeclarations_.clear();
        this._importDeclarations_.addAll(list);
        for(PImportDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PMainDeclaration getMainDeclaration()
    {
        return this._mainDeclaration_;
    }

    public void setMainDeclaration(PMainDeclaration node)
    {
        if(this._mainDeclaration_ != null)
        {
            this._mainDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._namespaceDeclaration_)
            + toString(this._useDeclarations_)
            + toString(this._importDeclarations_)
            + toString(this._mainDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._namespaceDeclaration_ == child)
        {
            this._namespaceDeclaration_ = null;
            return;
        }

        if(this._useDeclarations_.remove(child))
        {
            return;
        }

        if(this._importDeclarations_.remove(child))
        {
            return;
        }

        if(this._mainDeclaration_ == child)
        {
            this._mainDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._namespaceDeclaration_ == oldChild)
        {
            setNamespaceDeclaration((PNamespaceDeclaration) newChild);
            return;
        }

        for(ListIterator<PUseDeclaration> i = this._useDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUseDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PImportDeclaration> i = this._importDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PImportDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._mainDeclaration_ == oldChild)
        {
            setMainDeclaration((PMainDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
