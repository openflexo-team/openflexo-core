/*
 * (c) Copyright 2014-2015 Openflexo
 *
 * This file is part of OpenFlexo.
 *
 * OpenFlexo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenFlexo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenFlexo. If not, see <http://www.gnu.org/licenses/>.
 *
 */

Package org.openflexo.foundation.fml.cli.parser;

Helpers
 upper_case = ['A' .. 'Z'] | [0x00c0 .. 0x00dd] | 0x20ac;
 lower_case = ['a' .. 'z'] | [0x00e0 .. 0x00fd] | 0x20ac;
 digit = ['0'..'9'];
 letter = upper_case | lower_case | '_' ;
 any        = [0 .. 0xffff];
 not_hyphen = [any - '"' ];
 not_hyphen2 = [any - ''' ];
 file_char = upper_case | lower_case | digit | '_' | '.';

Tokens
 dollar = '$';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 power = '^';
 lt = '<';
 gt = '>';
 lte = '<=';
 gte = '>=';
 and = '&';
 and2 = '&&';
 or = '|';
 or2 = '||';
 eq = '=';
 eq2 = '==';
 assign = ':=';
 neq = '!=';
 not = '!';
 l_par = '(';
 r_par = ')';
 dot = '.';
 double_dot = '..';
 comma = ',';
 if_token = '?';
 else_token = ':';
 pi = 'pi';
 cos = 'cos';
 acos = 'acos';
 sin = 'sin';
 asin = 'asin';
 tan = 'tan';
 atan = 'atan';
 log = 'log';
 exp = 'exp';
 sqrt = 'sqrt';
 true = 'true';
 false = 'false';
 null = 'null';
 decimal_number = ['0' .. '9']+;
 precise_number = ['0' .. '9']+ '.' ['0' .. '9']+;
 scientific_notation_number = 
 ['0' .. '9']+ '.' ['0' .. '9']+ 'e' ['0' .. '9']+ 
 | ['0' .. '9']+ '.' ['0' .. '9']+ 'e' '-' ['0' .. '9']+
 | ['0' .. '9']+ '.' ['0' .. '9']+ 'E' ['0' .. '9']+ 
 | ['0' .. '9']+ '.' ['0' .. '9']+ 'E' '-' ['0' .. '9']+;
 string_value = '"' (not_hyphen)* '"';
 chars_value = ''' (not_hyphen2)* ''';
 
 // directives
 help = 'help';
 pwd = 'pwd';
 ls = 'ls';
 cd = 'cd';
 services = 'services';
 service = 'service';
 exit = 'exit';
 
 // commands
 context = 'context';
 
 identifier = letter (letter | digit)*;
 
 file_name = file_char (file_char)*;
 
 blank = (' ' | 13 | 10)+;

Ignored Tokens
 blank;
 
Productions

 command =
  {directive} directive |
  {fml_command} fml_command;

 directive =
  {help} help |
  {pwd} pwd |
  {ls} ls |
  {cd} cd path |
  {services} services |
  {service} service [service_name]:identifier [action]:identifier [options]:directive_option* |
  {exit} exit;

 directive_option = 
  {path} path |
  {number} number;

 path =
  {file_name} file_name |
  {identifier} identifier |
  {dot} dot |
  {path} file_name div path |
  {dot_path} dot div path |
  {double_dot} double_dot |
  {double_dot_path} double_dot div path;

 fml_command =
  {context} context |
  {expr} expr |
  {assignation} identifier assign expr;
 
 expr =
  {expr2} expr2 |
  {cond_expr} [condition]:expr if_token [then]:expr2 else_token [else]:expr2 |
  {eq_expr} [left]:expr eq [right]:expr2 |
  {eq2_expr} [left]:expr eq2 [right]:expr2 |
  {neq_expr} [left]:expr neq [right]:expr2 |
  {lt_expr} [left]:expr lt [right]:expr2 |
  {gt_expr} [left]:expr gt [right]:expr2 |
  {lte_expr} [left]:expr lte [right]:expr2 |
  {gte_expr} [left]:expr gte [right]:expr2 ;

 expr2 =
  {expr3} expr3 |
  {or_expr} [left]:expr2 or [right]:expr3 |
  {or2_expr} [left]:expr2 or2 [right]:expr3 |
  {add_expr} [left]:expr2 plus [right]:expr3 |
  {sub_expr} [left]:expr2 minus [right]:expr3;
  
 expr3 =
  {term} term |
  {and_expr} [left]:expr3 and [right]:term |
  {and2_expr} [left]:expr3 and2 [right]:term |
  {mult_expr} [left]:expr3 mult [right]:term |
  {div_expr} [left]:expr3 div [right]:term |
  {mod_expr} [left]:expr3 mod [right]:term |
  {power_expr} [left]:expr3 power [right]:term |
  {not_expr} not term;
 
 type_reference = 
  {basic} dollar type_reference_path |
  {parametered} dollar type_reference_path type_reference_arg_list;

 type_reference_path = 
  {identifier} identifier |
  {tail} identifier dot type_reference_path;

 type_reference_arg_list = 
   lt type_reference [type_reference_additional_args]:type_reference_additional_arg* gt;

 type_reference_additional_arg = 
  comma type_reference;

 call = 
  identifier arg_list ;

 arg_list = 
  {empty_list} l_par r_par |
  {non_empty_list} l_par expr [additional_args]:additional_arg* r_par;

 additional_arg = 
  comma expr;

 binding = 
  {identifier} identifier |
  {call} call |
  {tail1} identifier dot binding |
  {tail2} call dot binding;

 function =
  {cos_func} cos l_par expr2 r_par |
  {acos_func} acos l_par expr2 r_par |
  {sin_func} sin l_par expr2 r_par |
  {asin_func} asin l_par expr2 r_par |
  {tan_func} tan l_par expr2 r_par |
  {atan_func} atan l_par expr2 r_par |
  {exp_func} exp l_par expr2 r_par |
  {log_func} log l_par expr2 r_par |
  {sqrt_func} sqrt l_par expr2 r_par;

 constant = 
  {true} true |
  {false} false |
  {null} null |
  {pi} pi;

 number =
  {decimal_number} decimal_number |
  {precise_number} precise_number |
  {scientific_notation_number} scientific_notation_number |
  {constant} constant;

 term =
  {negative} minus term |
  {number} number |
  {string_value} string_value |
  {chars_value} chars_value |
  {function} function |
  {binding} binding |
  {expr} l_par expr r_par |
  {cast} l_par type_reference r_par term;
